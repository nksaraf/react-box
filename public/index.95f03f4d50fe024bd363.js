(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{1008:function(e,n,t){"use strict";t.r(n);var r=t(13),a=t.n(r),o=t(209),i=t(172),s=t.n(i),l=t(143),c=t.n(l),d=t(307),u=t(122),m=t.n(u),p=t(87),T=t.n(p);function b(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function f(e){var n=e.style,t=c()(e,["style"]),r=a.a.useState(!1),o=T()(r,2),i=o[0],l=o[1],d=function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?b(t,!0).forEach((function(n){m()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):b(t).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({},n,{transition:"opacity .3s ease",opacity:i?1:0});return a.a.createElement("iframe",s()({onLoad:function(){return l(!0)}},t,{style:d}))}var g=t(166),h=t.n(g);function H(e){var n=e.code,t=e.frames,r=void 0===t?[]:t;return a.a.createElement("div",{className:h.a.root},r.map((function(e){var t=e.theme,r=e.width;return a.a.createElement("div",{key:"".concat(t,"_").concat(r),className:h.a.frameContainer},a.a.createElement("div",{className:h.a.frameName},"__PLAYROOM__NO_THEME__"===t?a.a.createElement("strong",{className:h.a.strong},r,"px"):a.a.createElement(a.a.Fragment,null,a.a.createElement("strong",{className:h.a.strong},t)," – ".concat(r,"px"))),a.a.createElement(f,{src:"frame.html#?themeName=".concat(encodeURIComponent(t),"&code=").concat(encodeURIComponent(n)),className:h.a.frame,style:{width:r}}))})))}var M=t(167),y=t.n(M),L=function(e){return a.a.createElement("svg",s()({viewBox:"0 0 16 20"},e),a.a.createElement("path",{d:"M12 13H1a1 1 0 0 1-1-1V1a1 1 0 0 1 1-1h11a1 1 0 0 1 1 1v11a1 1 0 0 1-1 1zM2 11h9V2H2v9zm13 5H4a1 1 0 0 1-1-1v-1h11V3h1a1 1 0 0 1 1 1v11a1 1 0 0 1-1 1z"}),a.a.createElement("text",{y:31,fontSize:5,fontWeight:"bold",fontFamily:"'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif"},"Created by ✦ Shmidt Sergey ✦"),a.a.createElement("text",{y:36,fontSize:5,fontWeight:"bold",fontFamily:"'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif"},"from the Noun Project"))},E=t(184),v=t.n(E),P=t(210),R=t.n(P),S=t(281),C=t.n(S),x=t(308),A=t.n(x),D=t(135),w=function(e,n){var t=JSON.stringify({code:e}),r=C.a.compressToEncodedURIComponent(t),a="#?code=".concat(r);if(n){var o=n.replace(/\/$/,"");return"".concat(o,"/").concat(a)}return a};var F=t(126),k="// Type definitions for React 16.9\n// Project: http://facebook.github.io/react/\n// Definitions by: Asana <https://asana.com>\n//                 AssureSign <http://www.assuresign.com>\n//                 Microsoft <https://microsoft.com>\n//                 John Reilly <https://github.com/johnnyreilly>\n//                 Benoit Benezech <https://github.com/bbenezech>\n//                 Patricio Zavolinsky <https://github.com/pzavolinsky>\n//                 Digiguru <https://github.com/digiguru>\n//                 Eric Anderson <https://github.com/ericanderson>\n//                 Dovydas Navickas <https://github.com/DovydasNavickas>\n//                 Josh Rutherford <https://github.com/theruther4d>\n//                 Guilherme Hübner <https://github.com/guilhermehubner>\n//                 Ferdy Budhidharma <https://github.com/ferdaber>\n//                 Johann Rakotoharisoa <https://github.com/jrakotoharisoa>\n//                 Olivier Pascal <https://github.com/pascaloliv>\n//                 Martin Hochel <https://github.com/hotell>\n//                 Frank Li <https://github.com/franklixuefei>\n//                 Jessica Franco <https://github.com/Jessidhia>\n//                 Saransh Kataria <https://github.com/saranshkataria>\n//                 Kanitkorn Sujautra <https://github.com/lukyth>\n//                 Sebastian Silbermann <https://github.com/eps1lon>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.8\n\n/// <reference path=\"global.d.ts\" />\n\nimport * as CSS from 'csstype';\nimport * as PropTypes from 'prop-types';\n\ntype NativeAnimationEvent = AnimationEvent;\ntype NativeClipboardEvent = ClipboardEvent;\ntype NativeCompositionEvent = CompositionEvent;\ntype NativeDragEvent = DragEvent;\ntype NativeFocusEvent = FocusEvent;\ntype NativeKeyboardEvent = KeyboardEvent;\ntype NativeMouseEvent = MouseEvent;\ntype NativeTouchEvent = TouchEvent;\ntype NativePointerEvent = PointerEvent;\ntype NativeTransitionEvent = TransitionEvent;\ntype NativeUIEvent = UIEvent;\ntype NativeWheelEvent = WheelEvent;\n\n/**\n * defined in scheduler/tracing\n */\ninterface SchedulerInteraction {\n    id: number;\n    name: string;\n    timestamp: number;\n}\n\n// tslint:disable-next-line:export-just-namespace\nexport = React;\nexport as namespace React;\n\ndeclare namespace React {\n    //\n    // React Elements\n    // ----------------------------------------------------------------------\n\n    type ElementType<P = any> =\n        {\n            [K in keyof JSX.IntrinsicElements]: P extends JSX.IntrinsicElements[K] ? K : never\n        }[keyof JSX.IntrinsicElements] |\n        ComponentType<P>;\n    /**\n     * @deprecated Please use ElementType\n     */\n    type ReactType<P = any> = ElementType<P>;\n    type ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;\n\n    type JSXElementConstructor<P> =\n        | ((props: P) => ReactElement | null)\n        | (new (props: P) => Component<P, any>);\n\n    type Key = string | number;\n\n    interface RefObject<T> {\n        readonly current: T | null;\n    }\n\n    type Ref<T> = { bivarianceHack(instance: T | null): void }[\"bivarianceHack\"] | RefObject<T> | null;\n    type LegacyRef<T> = string | Ref<T>;\n\n    type ComponentState = any;\n\n    interface Attributes {\n        key?: Key;\n    }\n    interface RefAttributes<T> extends Attributes {\n        ref?: Ref<T>;\n    }\n    interface ClassAttributes<T> extends Attributes {\n        ref?: LegacyRef<T>;\n    }\n\n    interface ReactElement<P = any, T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>> {\n        type: T;\n        props: P;\n        key: Key | null;\n    }\n\n    interface ReactComponentElement<\n        T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>,\n        P = Pick<ComponentProps<T>, Exclude<keyof ComponentProps<T>, 'key' | 'ref'>>\n    > extends ReactElement<P, T> { }\n\n    /**\n     * @deprecated Please use FunctionComponentElement\n     */\n    type SFCElement<P> = FunctionComponentElement<P>;\n\n    interface FunctionComponentElement<P> extends ReactElement<P, FunctionComponent<P>> {\n        ref?: 'ref' extends keyof P ? P extends { ref?: infer R } ? R : never : never;\n    }\n\n    type CElement<P, T extends Component<P, ComponentState>> = ComponentElement<P, T>;\n    interface ComponentElement<P, T extends Component<P, ComponentState>> extends ReactElement<P, ComponentClass<P>> {\n        ref?: LegacyRef<T>;\n    }\n\n    type ClassicElement<P> = CElement<P, ClassicComponent<P, ComponentState>>;\n\n    // string fallback for custom web-components\n    interface DOMElement<P extends HTMLAttributes<T> | SVGAttributes<T>, T extends Element> extends ReactElement<P, string> {\n        ref: LegacyRef<T>;\n    }\n\n    // ReactHTML for ReactHTMLElement\n    // tslint:disable-next-line:no-empty-interface\n    interface ReactHTMLElement<T extends HTMLElement> extends DetailedReactHTMLElement<AllHTMLAttributes<T>, T> { }\n\n    interface DetailedReactHTMLElement<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMElement<P, T> {\n        type: keyof ReactHTML;\n    }\n\n    // ReactSVG for ReactSVGElement\n    interface ReactSVGElement extends DOMElement<SVGAttributes<SVGElement>, SVGElement> {\n        type: keyof ReactSVG;\n    }\n\n    interface ReactPortal extends ReactElement {\n        key: Key | null;\n        children: ReactNode;\n    }\n\n    //\n    // Factories\n    // ----------------------------------------------------------------------\n\n    type Factory<P> = (props?: Attributes & P, ...children: ReactNode[]) => ReactElement<P>;\n\n    /**\n     * @deprecated Please use FunctionComponentFactory\n     */\n    type SFCFactory<P> = FunctionComponentFactory<P>;\n\n    type FunctionComponentFactory<P> = (props?: Attributes & P, ...children: ReactNode[]) => FunctionComponentElement<P>;\n\n    type ComponentFactory<P, T extends Component<P, ComponentState>> =\n        (props?: ClassAttributes<T> & P, ...children: ReactNode[]) => CElement<P, T>;\n\n    type CFactory<P, T extends Component<P, ComponentState>> = ComponentFactory<P, T>;\n    type ClassicFactory<P> = CFactory<P, ClassicComponent<P, ComponentState>>;\n\n    type DOMFactory<P extends DOMAttributes<T>, T extends Element> =\n        (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]) => DOMElement<P, T>;\n\n    // tslint:disable-next-line:no-empty-interface\n    interface HTMLFactory<T extends HTMLElement> extends DetailedHTMLFactory<AllHTMLAttributes<T>, T> {}\n\n    interface DetailedHTMLFactory<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMFactory<P, T> {\n        (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    }\n\n    interface SVGFactory extends DOMFactory<SVGAttributes<SVGElement>, SVGElement> {\n        (props?: ClassAttributes<SVGElement> & SVGAttributes<SVGElement> | null, ...children: ReactNode[]): ReactSVGElement;\n    }\n\n    //\n    // React Nodes\n    // http://facebook.github.io/react/docs/glossary.html\n    // ----------------------------------------------------------------------\n\n    type ReactText = string | number;\n    type ReactChild = ReactElement | ReactText;\n\n    interface ReactNodeArray extends Array<ReactNode> {}\n    type ReactFragment = {} | ReactNodeArray;\n    type ReactNode = ReactChild | ReactFragment | ReactPortal | boolean | null | undefined;\n\n    //\n    // Top Level API\n    // ----------------------------------------------------------------------\n\n    // DOM Elements\n    function createFactory<T extends HTMLElement>(\n        type: keyof ReactHTML): HTMLFactory<T>;\n    function createFactory(\n        type: keyof ReactSVG): SVGFactory;\n    function createFactory<P extends DOMAttributes<T>, T extends Element>(\n        type: string): DOMFactory<P, T>;\n\n    // Custom components\n    function createFactory<P>(type: FunctionComponent<P>): FunctionComponentFactory<P>;\n    function createFactory<P>(\n        type: ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>): CFactory<P, ClassicComponent<P, ComponentState>>;\n    function createFactory<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n        type: ClassType<P, T, C>): CFactory<P, T>;\n    function createFactory<P>(type: ComponentClass<P>): Factory<P>;\n\n    // DOM Elements\n    // TODO: generalize this to everything in keyof ReactHTML, not just \"input\"\n    function createElement(\n        type: \"input\",\n        props?: InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement> | null,\n        ...children: ReactNode[]): DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n    function createElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        type: keyof ReactHTML,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    function createElement<P extends SVGAttributes<T>, T extends SVGElement>(\n        type: keyof ReactSVG,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): ReactSVGElement;\n    function createElement<P extends DOMAttributes<T>, T extends Element>(\n        type: string,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): DOMElement<P, T>;\n\n    // Custom components\n\n    function createElement<P extends {}>(\n        type: FunctionComponent<P>,\n        props?: Attributes & P | null,\n        ...children: ReactNode[]): FunctionComponentElement<P>;\n    function createElement<P extends {}>(\n        type: ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>,\n        props?: ClassAttributes<ClassicComponent<P, ComponentState>> & P | null,\n        ...children: ReactNode[]): CElement<P, ClassicComponent<P, ComponentState>>;\n    function createElement<P extends {}, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n        type: ClassType<P, T, C>,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): CElement<P, T>;\n    function createElement<P extends {}>(\n        type: FunctionComponent<P> | ComponentClass<P> | string,\n        props?: Attributes & P | null,\n        ...children: ReactNode[]): ReactElement<P>;\n\n    // DOM Elements\n    // ReactHTMLElement\n    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        element: DetailedReactHTMLElement<P, T>,\n        props?: P,\n        ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    // ReactHTMLElement, less specific\n    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        element: ReactHTMLElement<T>,\n        props?: P,\n        ...children: ReactNode[]): ReactHTMLElement<T>;\n    // SVGElement\n    function cloneElement<P extends SVGAttributes<T>, T extends SVGElement>(\n        element: ReactSVGElement,\n        props?: P,\n        ...children: ReactNode[]): ReactSVGElement;\n    // DOM Element (has to be the last, because type checking stops at first overload that fits)\n    function cloneElement<P extends DOMAttributes<T>, T extends Element>(\n        element: DOMElement<P, T>,\n        props?: DOMAttributes<T> & P,\n        ...children: ReactNode[]): DOMElement<P, T>;\n\n    // Custom components\n    function cloneElement<P>(\n        element: FunctionComponentElement<P>,\n        props?: Partial<P> & Attributes,\n        ...children: ReactNode[]): FunctionComponentElement<P>;\n    function cloneElement<P, T extends Component<P, ComponentState>>(\n        element: CElement<P, T>,\n        props?: Partial<P> & ClassAttributes<T>,\n        ...children: ReactNode[]): CElement<P, T>;\n    function cloneElement<P>(\n        element: ReactElement<P>,\n        props?: Partial<P> & Attributes,\n        ...children: ReactNode[]): ReactElement<P>;\n\n    // Context via RenderProps\n    interface ProviderProps<T> {\n        value: T;\n        children?: ReactNode;\n    }\n\n    interface ConsumerProps<T> {\n        children: (value: T) => ReactNode;\n        unstable_observedBits?: number;\n    }\n\n    // TODO: similar to how Fragment is actually a symbol, the values returned from createContext,\n    // forwardRef and memo are actually objects that are treated specially by the renderer; see:\n    // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/ReactContext.js#L35-L48\n    // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/forwardRef.js#L42-L45\n    // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/memo.js#L27-L31\n    // However, we have no way of telling the JSX parser that it's a JSX element type or its props other than\n    // by pretending to be a normal component.\n    //\n    // We don't just use ComponentType or SFC types because you are not supposed to attach statics to this\n    // object, but rather to the original function.\n    interface ExoticComponent<P = {}> {\n        /**\n         * **NOTE**: Exotic components are not callable.\n         */\n        (props: P): (ReactElement|null);\n        readonly $$typeof: symbol;\n    }\n\n    interface NamedExoticComponent<P = {}> extends ExoticComponent<P> {\n        displayName?: string;\n    }\n\n    interface ProviderExoticComponent<P> extends ExoticComponent<P> {\n        propTypes?: WeakValidationMap<P>;\n    }\n\n    type ContextType<C extends Context<any>> = C extends Context<infer T> ? T : never;\n\n    // NOTE: only the Context object itself can get a displayName\n    // https://github.com/facebook/react-devtools/blob/e0b854e4c/backend/attachRendererFiber.js#L310-L325\n    type Provider<T> = ProviderExoticComponent<ProviderProps<T>>;\n    type Consumer<T> = ExoticComponent<ConsumerProps<T>>;\n    interface Context<T> {\n        Provider: Provider<T>;\n        Consumer: Consumer<T>;\n        displayName?: string;\n    }\n    function createContext<T>(\n        defaultValue: T,\n        calculateChangedBits?: (prev: T, next: T) => number\n    ): Context<T>;\n\n    function isValidElement<P>(object: {} | null | undefined): object is ReactElement<P>;\n\n    const Children: ReactChildren;\n    const Fragment: ExoticComponent<{ children?: ReactNode }>;\n    const StrictMode: ExoticComponent<{ children?: ReactNode }>;\n\n    interface SuspenseProps {\n        children?: ReactNode;\n\n        /** A fallback react tree to show when a Suspense child (like React.lazy) suspends */\n        fallback: NonNullable<ReactNode>|null;\n    }\n    /**\n     * This feature is not yet available for server-side rendering.\n     * Suspense support will be added in a later release.\n     */\n    const Suspense: ExoticComponent<SuspenseProps>;\n    const version: string;\n\n    /**\n     * {@link https://github.com/bvaughn/rfcs/blob/profiler/text/0000-profiler.md#detailed-design | API}\n     */\n    type ProfilerOnRenderCallback = (\n        id: string,\n        phase: \"mount\" | \"update\",\n        actualDuration: number,\n        baseDuration: number,\n        startTime: number,\n        commitTime: number,\n        interactions: Set<SchedulerInteraction>,\n    ) => void;\n    interface ProfilerProps {\n        children?: ReactNode;\n        id: string;\n        onRender: ProfilerOnRenderCallback;\n    }\n\n    const Profiler: ExoticComponent<ProfilerProps>;\n\n    //\n    // Component API\n    // ----------------------------------------------------------------------\n\n    type ReactInstance = Component<any> | Element;\n\n    // Base component for plain JS classes\n    // tslint:disable-next-line:no-empty-interface\n    interface Component<P = {}, S = {}, SS = any> extends ComponentLifecycle<P, S, SS> { }\n    class Component<P, S> {\n        // tslint won't let me format the sample code in a way that vscode likes it :(\n        /**\n         * If set, this.context will be set at runtime to the current value of the given Context.\n         *\n         * Usage:\n         *\n         *\n         * @see https://reactjs.org/docs/context.html#classcontexttype\n         */\n        static contextType?: Context<any>;\n\n        /**\n         * If using the new style context, re-declare this in your class to be the\n         * React.ContextType of your static contextType.\n         *\n         *\n         * @deprecated if used without a type annotation, or without static contextType\n         * @see https://reactjs.org/docs/legacy-context.html\n         */\n        // TODO (TypeScript 3.0): unknown\n        context: any;\n\n        constructor(props: Readonly<P>);\n        /**\n         * @deprecated\n         * @see https://reactjs.org/docs/legacy-context.html\n         */\n        constructor(props: P, context?: any);\n\n        // We MUST keep setState() as a unified signature because it allows proper checking of the method return type.\n        // See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257\n        // Also, the  | S allows intellisense to not be dumbisense\n        setState<K extends keyof S>(\n            state: ((prevState: Readonly<S>, props: Readonly<P>) => (Pick<S, K> | S | null)) | (Pick<S, K> | S | null),\n            callback?: () => void\n        ): void;\n\n        forceUpdate(callback?: () => void): void;\n        render(): ReactNode;\n\n        // React.Props<T> is now deprecated, which means that the children\n        // property is not available on P by default, even though you can\n        // always pass children as variadic arguments to createElement.\n        // In the future, if we can define its call signature conditionally\n        // on the existence of children in P, then we should remove this.\n        readonly props: Readonly<P> & Readonly<{ children?: ReactNode }>;\n        state: Readonly<S>;\n        /**\n         * @deprecated\n         * https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n         */\n        refs: {\n            [key: string]: ReactInstance\n        };\n    }\n\n    class PureComponent<P = {}, S = {}, SS = any> extends Component<P, S, SS> { }\n\n    interface ClassicComponent<P = {}, S = {}> extends Component<P, S> {\n        replaceState(nextState: S, callback?: () => void): void;\n        isMounted(): boolean;\n        getInitialState?(): S;\n    }\n\n    interface ChildContextProvider<CC> {\n        getChildContext(): CC;\n    }\n\n    //\n    // Class Interfaces\n    // ----------------------------------------------------------------------\n\n    /**\n     * @deprecated as of recent React versions, function components can no\n     * longer be considered 'stateless'. Please use FunctionComponent instead.\n     *\n     * @see [React Hooks](https://reactjs.org/docs/hooks-intro.html)\n     */\n    type SFC<P = {}> = FunctionComponent<P>;\n\n    /**\n     * @deprecated as of recent React versions, function components can no\n     * longer be considered 'stateless'. Please use FunctionComponent instead.\n     *\n     * @see [React Hooks](https://reactjs.org/docs/hooks-intro.html)\n     */\n    type StatelessComponent<P = {}> = FunctionComponent<P>;\n\n    type FC<P = {}> = FunctionComponent<P>;\n\n    interface FunctionComponent<P = {}> {\n        (props: PropsWithChildren<P>, context?: any): ReactElement | null;\n        propTypes?: WeakValidationMap<P>;\n        contextTypes?: ValidationMap<any>;\n        defaultProps?: Partial<P>;\n        displayName?: string;\n    }\n\n    interface RefForwardingComponent<T, P = {}> {\n        (props: PropsWithChildren<P>, ref: Ref<T>): ReactElement | null;\n        propTypes?: WeakValidationMap<P>;\n        contextTypes?: ValidationMap<any>;\n        defaultProps?: Partial<P>;\n        displayName?: string;\n    }\n\n    interface ComponentClass<P = {}, S = ComponentState> extends StaticLifecycle<P, S> {\n        new (props: P, context?: any): Component<P, S>;\n        propTypes?: WeakValidationMap<P>;\n        contextType?: Context<any>;\n        contextTypes?: ValidationMap<any>;\n        childContextTypes?: ValidationMap<any>;\n        defaultProps?: Partial<P>;\n        displayName?: string;\n    }\n\n    interface ClassicComponentClass<P = {}> extends ComponentClass<P> {\n        new (props: P, context?: any): ClassicComponent<P, ComponentState>;\n        getDefaultProps?(): P;\n    }\n\n    /**\n     * We use an intersection type to infer multiple type parameters from\n     * a single argument, which is useful for many top-level API defs.\n     * See https://github.com/Microsoft/TypeScript/issues/7234 for more info.\n     */\n    type ClassType<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>> =\n        C &\n        (new (props: P, context?: any) => T);\n\n    //\n    // Component Specs and Lifecycle\n    // ----------------------------------------------------------------------\n\n    // This should actually be something like Lifecycle<P, S> | DeprecatedLifecycle<P, S>,\n    // as React will _not_ call the deprecated lifecycle methods if any of the new lifecycle\n    // methods are present.\n    interface ComponentLifecycle<P, S, SS = any> extends NewLifecycle<P, S, SS>, DeprecatedLifecycle<P, S> {\n        /**\n         * Called immediately after a component is mounted. Setting state here will trigger re-rendering.\n         */\n        componentDidMount?(): void;\n        /**\n         * Called to determine whether the change in props and state should trigger a re-render.\n         *\n         * Component always returns true.\n         * PureComponent implements a shallow comparison on props and state and returns true if any\n         * props or states have changed.\n         *\n         * If false is returned, Component#render, componentWillUpdate\n         * and componentDidUpdate will not be called.\n         */\n        shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): boolean;\n        /**\n         * Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\n         * cancelled network requests, or cleaning up any DOM elements created in componentDidMount.\n         */\n        componentWillUnmount?(): void;\n        /**\n         * Catches exceptions generated in descendant components. Unhandled exceptions will cause\n         * the entire component tree to unmount.\n         */\n        componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;\n    }\n\n    // Unfortunately, we have no way of declaring that the component constructor must implement this\n    interface StaticLifecycle<P, S> {\n        getDerivedStateFromProps?: GetDerivedStateFromProps<P, S>;\n        getDerivedStateFromError?: GetDerivedStateFromError<P, S>;\n    }\n\n    type GetDerivedStateFromProps<P, S> =\n        /**\n         * Returns an update to a component's state based on its new props and old state.\n         *\n         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n         */\n        (nextProps: Readonly<P>, prevState: S) => Partial<S> | null;\n\n    type GetDerivedStateFromError<P, S> =\n        /**\n         * This lifecycle is invoked after an error has been thrown by a descendant component.\n         * It receives the error that was thrown as a parameter and should return a value to update state.\n         *\n         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n         */\n        (error: any) => Partial<S> | null;\n\n    // This should be \"infer SS\" but can't use it yet\n    interface NewLifecycle<P, S, SS> {\n        /**\n         * Runs before React applies the result of render to the document, and\n         * returns an object to be given to componentDidUpdate. Useful for saving\n         * things such as scroll position before render causes changes to it.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\n         * lifecycle events from running.\n         */\n        getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>): SS | null;\n        /**\n         * Called immediately after updating occurs. Not called for the initial render.\n         *\n         * The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n         */\n        componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS): void;\n    }\n\n    interface DeprecatedLifecycle<P, S> {\n        /**\n         * Called immediately before mounting occurs, and before Component#render.\n         * Avoid introducing any side-effects or subscriptions in this method.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use componentDidMount or the constructor instead; will stop working in React 17\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        componentWillMount?(): void;\n        /**\n         * Called immediately before mounting occurs, and before Component#render.\n         * Avoid introducing any side-effects or subscriptions in this method.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use componentDidMount or the constructor instead\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        UNSAFE_componentWillMount?(): void;\n        /**\n         * Called when the component may be receiving new props.\n         * React may call this even if props have not changed, so be sure to compare new and existing\n         * props if you only want to handle changes.\n         *\n         * Calling Component#setState generally does not trigger this method.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use static getDerivedStateFromProps instead; will stop working in React 17\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n        /**\n         * Called when the component may be receiving new props.\n         * React may call this even if props have not changed, so be sure to compare new and existing\n         * props if you only want to handle changes.\n         *\n         * Calling Component#setState generally does not trigger this method.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use static getDerivedStateFromProps instead\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n        /**\n         * Called immediately before rendering when new props or state is received. Not called for the initial render.\n         *\n         * Note: You cannot call Component#setState here.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n        /**\n         * Called immediately before rendering when new props or state is received. Not called for the initial render.\n         *\n         * Note: You cannot call Component#setState here.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use getSnapshotBeforeUpdate instead\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n         * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n    }\n\n    interface Mixin<P, S> extends ComponentLifecycle<P, S> {\n        mixins?: Array<Mixin<P, S>>;\n        statics?: {\n            [key: string]: any;\n        };\n\n        displayName?: string;\n        propTypes?: ValidationMap<any>;\n        contextTypes?: ValidationMap<any>;\n        childContextTypes?: ValidationMap<any>;\n\n        getDefaultProps?(): P;\n        getInitialState?(): S;\n    }\n\n    interface ComponentSpec<P, S> extends Mixin<P, S> {\n        render(): ReactNode;\n\n        [propertyName: string]: any;\n    }\n\n    function createRef<T>(): RefObject<T>;\n\n    \n    // but can be given its own specific name\n    interface ForwardRefExoticComponent<P> extends NamedExoticComponent<P> {\n        defaultProps?: Partial<P>;\n        propTypes?: WeakValidationMap<P>;\n    }\n\n    function forwardRef<T, P = {}>(Component: RefForwardingComponent<T, P>): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;\n\n    /** Ensures that the props do not include ref at all */\n    type PropsWithoutRef<P> =\n        // Just Pick would be sufficient for this, but I'm trying to avoid unnecessary mapping over union types\n        // https://github.com/Microsoft/TypeScript/issues/28339\n        'ref' extends keyof P\n            ? Pick<P, Exclude<keyof P, 'ref'>>\n            : P;\n    /** Ensures that the props do not include string ref, which cannot be forwarded */\n    type PropsWithRef<P> =\n        // Just \"P extends { ref?: infer R }\" looks sufficient, but R will infer as {} if P is {}.\n        'ref' extends keyof P\n            ? P extends { ref?: infer R }\n                ? string extends R\n                    ? PropsWithoutRef<P> & { ref?: Exclude<R, string> }\n                    : P\n                : P\n            : P;\n\n    type PropsWithChildren<P> = P & { children?: ReactNode };\n\n    /**\n     * NOTE: prefer ComponentPropsWithRef, if the ref is forwarded,\n     * or ComponentPropsWithoutRef when refs are not supported.\n     */\n    type ComponentProps<T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>> =\n        T extends JSXElementConstructor<infer P>\n            ? P\n            : T extends keyof JSX.IntrinsicElements\n                ? JSX.IntrinsicElements[T]\n                : {};\n    type ComponentPropsWithRef<T extends ElementType> =\n        T extends ComponentClass<infer P>\n            ? PropsWithoutRef<P> & RefAttributes<InstanceType<T>>\n            : PropsWithRef<ComponentProps<T>>;\n    type ComponentPropsWithoutRef<T extends ElementType> =\n        PropsWithoutRef<ComponentProps<T>>;\n\n    // but can be given its own specific name\n    type MemoExoticComponent<T extends ComponentType<any>> = NamedExoticComponent<ComponentPropsWithRef<T>> & {\n        readonly type: T;\n    };\n\n    function memo<P extends object>(\n        Component: SFC<P>,\n        propsAreEqual?: (prevProps: Readonly<PropsWithChildren<P>>, nextProps: Readonly<PropsWithChildren<P>>) => boolean\n    ): NamedExoticComponent<P>;\n    function memo<T extends ComponentType<any>>(\n        Component: T,\n        propsAreEqual?: (prevProps: Readonly<ComponentProps<T>>, nextProps: Readonly<ComponentProps<T>>) => boolean\n    ): MemoExoticComponent<T>;\n\n    type LazyExoticComponent<T extends ComponentType<any>> = ExoticComponent<ComponentPropsWithRef<T>> & {\n        readonly _result: T;\n    };\n\n    function lazy<T extends ComponentType<any>>(\n        factory: () => Promise<{ default: T }>\n    ): LazyExoticComponent<T>;\n\n    //\n    // React Hooks\n    // ----------------------------------------------------------------------\n\n    // based on the code in https://github.com/facebook/react/pull/13968\n\n    // Unlike the class component setState, the updates are not allowed to be partial\n    type SetStateAction<S> = S | ((prevState: S) => S);\n    // this technically does accept a second argument, but it's already under a deprecation warning\n    // and it's not even released so probably better to not define it.\n    type Dispatch<A> = (value: A) => void;\n    // Unlike redux, the actions _can_ be anything\n    type Reducer<S, A> = (prevState: S, action: A) => S;\n    // types used to try and prevent the compiler from reducing S\n    // to a supertype common with the second argument to useReducer()\n    type ReducerState<R extends Reducer<any, any>> = R extends Reducer<infer S, any> ? S : never;\n    type ReducerAction<R extends Reducer<any, any>> = R extends Reducer<any, infer A> ? A : never;\n    // The identity check is done with the SameValue algorithm (Object.is), which is stricter than ===\n    // TODO (TypeScript 3.0): ReadonlyArray<unknown>\n    type DependencyList = ReadonlyArray<any>;\n\n    // NOTE: callbacks are _only_ allowed to return either void, or a destructor.\n    // The destructor is itself only allowed to return void.\n    type EffectCallback = () => (void | (() => void | undefined));\n\n    interface MutableRefObject<T> {\n        current: T;\n    }\n\n    // This will technically work if you give a Consumer<T> or Provider<T> but it's deprecated and warns\n    /**\n     * Accepts a context object (the value returned from React.createContext) and returns the current\n     * context value, as given by the nearest context provider for the given context.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usecontext\n     */\n    function useContext<T>(context: Context<T>/*, (not public API) observedBits?: number|boolean */): T;\n    /**\n     * Returns a stateful value, and a function to update it.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usestate\n     */\n    function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];\n    // convenience overload when first argument is ommitted\n    /**\n     * Returns a stateful value, and a function to update it.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usestate\n     */\n    function useState<S = undefined>(): [S | undefined, Dispatch<SetStateAction<S | undefined>>];\n    /**\n     * An alternative to useState.\n     *\n     * useReducer is usually preferable to useState when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass dispatch down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n     */\n    // overload where \"I\" may be a subset of ReducerState<R>; used to provide autocompletion.\n    // If \"I\" matches ReducerState<R> exactly then the last overload will allow initializer to be ommitted.\n    // the last overload effectively behaves as if the identity function (x => x) is the initializer.\n    function useReducer<R extends Reducer<any, any>, I>(\n        reducer: R,\n        initializerArg: I & ReducerState<R>,\n        initializer: (arg: I & ReducerState<R>) => ReducerState<R>\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * An alternative to useState.\n     *\n     * useReducer is usually preferable to useState when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass dispatch down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n     */\n    // overload for free \"I\"; all goes as long as initializer converts it into \"ReducerState<R>\".\n    function useReducer<R extends Reducer<any, any>, I>(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) => ReducerState<R>\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * An alternative to useState.\n     *\n     * useReducer is usually preferable to useState when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass dispatch down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n     */\n\n    // I'm not sure if I keep this 2-ary or if I make it (2,3)-ary; it's currently (2,3)-ary.\n    // The Flow types do have an overload for 3-ary invocation with undefined initializer.\n\n    // NOTE: without the ReducerState indirection, TypeScript would reduce S to be the most common\n    // supertype between the reducer's return type and the initialState (or the initializer's return type),\n    // which would prevent autocompletion from ever working.\n\n    // TODO: double-check if this weird overload logic is necessary. It is possible it's either a bug\n    // in older versions, or a regression in newer versions of the typescript completion service.\n    function useReducer<R extends Reducer<any, any>>(\n        reducer: R,\n        initialState: ReducerState<R>,\n        initializer?: undefined\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * useRef returns a mutable ref object whose .current property is initialized to the passed argument\n     * (initialValue). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that useRef() is useful for more than the ref attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useref\n     */\n    // TODO (TypeScript 3.0): <T extends unknown>\n    function useRef<T>(initialValue: T): MutableRefObject<T>;\n    // convenience overload for refs given as a ref prop as they typically start with a null value\n    /**\n     * useRef returns a mutable ref object whose .current property is initialized to the passed argument\n     * (initialValue). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that useRef() is useful for more than the ref attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * Usage note: if you need the result of useRef to be directly mutable, include | null in the type\n     * of the generic argument.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useref\n     */\n    // TODO (TypeScript 3.0): <T extends unknown>\n    function useRef<T>(initialValue: T|null): RefObject<T>;\n    // convenience overload for potentially undefined initialValue / call with 0 arguments\n    // has a default to stop it from defaulting to {} instead\n    /**\n     * useRef returns a mutable ref object whose .current property is initialized to the passed argument\n     * (initialValue). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that useRef() is useful for more than the ref attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useref\n     */\n    // TODO (TypeScript 3.0): <T extends unknown>\n    function useRef<T = undefined>(): MutableRefObject<T | undefined>;\n    /**\n     * The signature is identical to useEffect, but it fires synchronously after all DOM mutations.\n     * Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside\n     * useLayoutEffect will be flushed synchronously, before the browser has a chance to paint.\n     *\n     * Prefer the standard useEffect when possible to avoid blocking visual updates.\n     *\n     * If you’re migrating code from a class component, useLayoutEffect fires in the same phase as\n     * componentDidMount and componentDidUpdate.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#uselayouteffect\n     */\n    function useLayoutEffect(effect: EffectCallback, deps?: DependencyList): void;\n    /**\n     * Accepts a function that contains imperative, possibly effectful code.\n     *\n     * @param effect Imperative function that can return a cleanup function\n     * @param deps If present, effect will only activate if the values in the list change.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useeffect\n     */\n    function useEffect(effect: EffectCallback, deps?: DependencyList): void;\n    // NOTE: this does not accept strings, but this will have to be fixed by removing strings from type Ref<T>\n    /**\n     * useImperativeHandle customizes the instance value that is exposed to parent components when using\n     * ref. As always, imperative code using refs should be avoided in most cases.\n     *\n     * useImperativeHandle should be used with React.forwardRef.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useimperativehandle\n     */\n    function useImperativeHandle<T, R extends T>(ref: Ref<T>|undefined, init: () => R, deps?: DependencyList): void;\n    // I made 'inputs' required here and in useMemo as there's no point to memoizing without the memoization key\n    // useCallback(X) is identical to just using X, useMemo(() => Y) is identical to just using Y.\n    /**\n     * useCallback will return a memoized version of the callback that only changes if one of the inputs\n     * has changed.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usecallback\n     */\n    // TODO (TypeScript 3.0): <T extends (...args: never[]) => unknown>\n    function useCallback<T extends (...args: any[]) => any>(callback: T, deps: DependencyList): T;\n    /**\n     * useMemo will only recompute the memoized value when one of the deps has changed.\n     *\n     * Usage note: if calling useMemo with a referentially stable function, also give it as the input in\n     * the second argument.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usememo\n     */\n    // allow undefined, but don't make it optional as that is very likely a mistake\n    function useMemo<T>(factory: () => T, deps: DependencyList | undefined): T;\n    /**\n     * useDebugValue can be used to display a label for custom hooks in React DevTools.\n     *\n     * NOTE: We don’t recommend adding debug values to every custom hook.\n     * It’s most valuable for custom hooks that are part of shared libraries.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usedebugvalue\n     */\n    // the name of the custom hook is itself derived from the function name at runtime:\n    // it's just the function name without the \"use\" prefix.\n    function useDebugValue<T>(value: T, format?: (value: T) => any): void;\n\n    //\n    // Event System\n    // ----------------------------------------------------------------------\n    // TODO: change any to unknown when moving to TS v3\n    interface BaseSyntheticEvent<E = object, C = any, T = any> {\n        nativeEvent: E;\n        currentTarget: C;\n        target: T;\n        bubbles: boolean;\n        cancelable: boolean;\n        defaultPrevented: boolean;\n        eventPhase: number;\n        isTrusted: boolean;\n        preventDefault(): void;\n        isDefaultPrevented(): boolean;\n        stopPropagation(): void;\n        isPropagationStopped(): boolean;\n        persist(): void;\n        timeStamp: number;\n        type: string;\n    }\n\n    /**\n     * currentTarget - a reference to the element on which the event listener is registered.\n     *\n     * target - a reference to the element from which the event was originally dispatched.\n     * This might be a child element to the element on which the event listener is registered.\n     * If you thought this should be EventTarget & T, see https://github.com/DefinitelyTyped/DefinitelyTyped/pull/12239\n     */\n    interface SyntheticEvent<T = Element, E = Event> extends BaseSyntheticEvent<E, EventTarget & T, EventTarget> {}\n\n    interface ClipboardEvent<T = Element> extends SyntheticEvent<T, NativeClipboardEvent> {\n        clipboardData: DataTransfer;\n    }\n\n    interface CompositionEvent<T = Element> extends SyntheticEvent<T, NativeCompositionEvent> {\n        data: string;\n    }\n\n    interface DragEvent<T = Element> extends MouseEvent<T, NativeDragEvent> {\n        dataTransfer: DataTransfer;\n    }\n\n    interface PointerEvent<T = Element> extends MouseEvent<T, NativePointerEvent> {\n        pointerId: number;\n        pressure: number;\n        tiltX: number;\n        tiltY: number;\n        width: number;\n        height: number;\n        pointerType: 'mouse' | 'pen' | 'touch';\n        isPrimary: boolean;\n    }\n\n    interface FocusEvent<T = Element> extends SyntheticEvent<T, NativeFocusEvent> {\n        relatedTarget: EventTarget;\n        target: EventTarget & T;\n    }\n\n    // tslint:disable-next-line:no-empty-interface\n    interface FormEvent<T = Element> extends SyntheticEvent<T> {\n    }\n\n    interface InvalidEvent<T = Element> extends SyntheticEvent<T> {\n        target: EventTarget & T;\n    }\n\n    interface ChangeEvent<T = Element> extends SyntheticEvent<T> {\n        target: EventTarget & T;\n    }\n\n    interface KeyboardEvent<T = Element> extends SyntheticEvent<T, NativeKeyboardEvent> {\n        altKey: boolean;\n        charCode: number;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: string): boolean;\n        /**\n         * See the [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#named-key-attribute-values). for possible values\n         */\n        key: string;\n        keyCode: number;\n        locale: string;\n        location: number;\n        metaKey: boolean;\n        repeat: boolean;\n        shiftKey: boolean;\n        which: number;\n    }\n\n    interface MouseEvent<T = Element, E = NativeMouseEvent> extends SyntheticEvent<T, E> {\n        altKey: boolean;\n        button: number;\n        buttons: number;\n        clientX: number;\n        clientY: number;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: string): boolean;\n        metaKey: boolean;\n        movementX: number;\n        movementY: number;\n        pageX: number;\n        pageY: number;\n        relatedTarget: EventTarget;\n        screenX: number;\n        screenY: number;\n        shiftKey: boolean;\n    }\n\n    interface TouchEvent<T = Element> extends SyntheticEvent<T, NativeTouchEvent> {\n        altKey: boolean;\n        changedTouches: TouchList;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: string): boolean;\n        metaKey: boolean;\n        shiftKey: boolean;\n        targetTouches: TouchList;\n        touches: TouchList;\n    }\n\n    interface UIEvent<T = Element> extends SyntheticEvent<T, NativeUIEvent> {\n        detail: number;\n        view: AbstractView;\n    }\n\n    interface WheelEvent<T = Element> extends MouseEvent<T, NativeWheelEvent> {\n        deltaMode: number;\n        deltaX: number;\n        deltaY: number;\n        deltaZ: number;\n    }\n\n    interface AnimationEvent<T = Element> extends SyntheticEvent<T, NativeAnimationEvent> {\n        animationName: string;\n        elapsedTime: number;\n        pseudoElement: string;\n    }\n\n    interface TransitionEvent<T = Element> extends SyntheticEvent<T, NativeTransitionEvent> {\n        elapsedTime: number;\n        propertyName: string;\n        pseudoElement: string;\n    }\n\n    //\n    // Event Handler Types\n    // ----------------------------------------------------------------------\n\n    type EventHandler<E extends SyntheticEvent<any>> = { bivarianceHack(event: E): void }[\"bivarianceHack\"];\n\n    type ReactEventHandler<T = Element> = EventHandler<SyntheticEvent<T>>;\n\n    type ClipboardEventHandler<T = Element> = EventHandler<ClipboardEvent<T>>;\n    type CompositionEventHandler<T = Element> = EventHandler<CompositionEvent<T>>;\n    type DragEventHandler<T = Element> = EventHandler<DragEvent<T>>;\n    type FocusEventHandler<T = Element> = EventHandler<FocusEvent<T>>;\n    type FormEventHandler<T = Element> = EventHandler<FormEvent<T>>;\n    type ChangeEventHandler<T = Element> = EventHandler<ChangeEvent<T>>;\n    type KeyboardEventHandler<T = Element> = EventHandler<KeyboardEvent<T>>;\n    type MouseEventHandler<T = Element> = EventHandler<MouseEvent<T>>;\n    type TouchEventHandler<T = Element> = EventHandler<TouchEvent<T>>;\n    type PointerEventHandler<T = Element> = EventHandler<PointerEvent<T>>;\n    type UIEventHandler<T = Element> = EventHandler<UIEvent<T>>;\n    type WheelEventHandler<T = Element> = EventHandler<WheelEvent<T>>;\n    type AnimationEventHandler<T = Element> = EventHandler<AnimationEvent<T>>;\n    type TransitionEventHandler<T = Element> = EventHandler<TransitionEvent<T>>;\n\n    //\n    // Props / DOM Attributes\n    // ----------------------------------------------------------------------\n\n    /**\n     * @deprecated. This was used to allow clients to pass ref and key\n     * to createElement, which is no longer necessary due to intersection\n     * types. If you need to declare a props object before passing it to\n     * createElement or a factory, use ClassAttributes<T>:\n     *\n     */\n    interface Props<T> {\n        children?: ReactNode;\n        key?: Key;\n        ref?: LegacyRef<T>;\n    }\n\n    interface HTMLProps<T> extends AllHTMLAttributes<T>, ClassAttributes<T> {\n    }\n\n    type DetailedHTMLProps<E extends HTMLAttributes<T>, T> = ClassAttributes<T> & E;\n\n    interface SVGProps<T> extends SVGAttributes<T>, ClassAttributes<T> {\n    }\n\n    interface DOMAttributes<T> {\n        children?: ReactNode;\n        dangerouslySetInnerHTML?: {\n            __html: string;\n        };\n\n        // Clipboard Events\n        onCopy?: ClipboardEventHandler<T>;\n        onCopyCapture?: ClipboardEventHandler<T>;\n        onCut?: ClipboardEventHandler<T>;\n        onCutCapture?: ClipboardEventHandler<T>;\n        onPaste?: ClipboardEventHandler<T>;\n        onPasteCapture?: ClipboardEventHandler<T>;\n\n        // Composition Events\n        onCompositionEnd?: CompositionEventHandler<T>;\n        onCompositionEndCapture?: CompositionEventHandler<T>;\n        onCompositionStart?: CompositionEventHandler<T>;\n        onCompositionStartCapture?: CompositionEventHandler<T>;\n        onCompositionUpdate?: CompositionEventHandler<T>;\n        onCompositionUpdateCapture?: CompositionEventHandler<T>;\n\n        // Focus Events\n        onFocus?: FocusEventHandler<T>;\n        onFocusCapture?: FocusEventHandler<T>;\n        onBlur?: FocusEventHandler<T>;\n        onBlurCapture?: FocusEventHandler<T>;\n\n        // Form Events\n        onChange?: FormEventHandler<T>;\n        onChangeCapture?: FormEventHandler<T>;\n        onBeforeInput?: FormEventHandler<T>;\n        onBeforeInputCapture?: FormEventHandler<T>;\n        onInput?: FormEventHandler<T>;\n        onInputCapture?: FormEventHandler<T>;\n        onReset?: FormEventHandler<T>;\n        onResetCapture?: FormEventHandler<T>;\n        onSubmit?: FormEventHandler<T>;\n        onSubmitCapture?: FormEventHandler<T>;\n        onInvalid?: FormEventHandler<T>;\n        onInvalidCapture?: FormEventHandler<T>;\n\n        // Image Events\n        onLoad?: ReactEventHandler<T>;\n        onLoadCapture?: ReactEventHandler<T>;\n        onError?: ReactEventHandler<T>; // also a Media Event\n        onErrorCapture?: ReactEventHandler<T>; // also a Media Event\n\n        // Keyboard Events\n        onKeyDown?: KeyboardEventHandler<T>;\n        onKeyDownCapture?: KeyboardEventHandler<T>;\n        onKeyPress?: KeyboardEventHandler<T>;\n        onKeyPressCapture?: KeyboardEventHandler<T>;\n        onKeyUp?: KeyboardEventHandler<T>;\n        onKeyUpCapture?: KeyboardEventHandler<T>;\n\n        // Media Events\n        onAbort?: ReactEventHandler<T>;\n        onAbortCapture?: ReactEventHandler<T>;\n        onCanPlay?: ReactEventHandler<T>;\n        onCanPlayCapture?: ReactEventHandler<T>;\n        onCanPlayThrough?: ReactEventHandler<T>;\n        onCanPlayThroughCapture?: ReactEventHandler<T>;\n        onDurationChange?: ReactEventHandler<T>;\n        onDurationChangeCapture?: ReactEventHandler<T>;\n        onEmptied?: ReactEventHandler<T>;\n        onEmptiedCapture?: ReactEventHandler<T>;\n        onEncrypted?: ReactEventHandler<T>;\n        onEncryptedCapture?: ReactEventHandler<T>;\n        onEnded?: ReactEventHandler<T>;\n        onEndedCapture?: ReactEventHandler<T>;\n        onLoadedData?: ReactEventHandler<T>;\n        onLoadedDataCapture?: ReactEventHandler<T>;\n        onLoadedMetadata?: ReactEventHandler<T>;\n        onLoadedMetadataCapture?: ReactEventHandler<T>;\n        onLoadStart?: ReactEventHandler<T>;\n        onLoadStartCapture?: ReactEventHandler<T>;\n        onPause?: ReactEventHandler<T>;\n        onPauseCapture?: ReactEventHandler<T>;\n        onPlay?: ReactEventHandler<T>;\n        onPlayCapture?: ReactEventHandler<T>;\n        onPlaying?: ReactEventHandler<T>;\n        onPlayingCapture?: ReactEventHandler<T>;\n        onProgress?: ReactEventHandler<T>;\n        onProgressCapture?: ReactEventHandler<T>;\n        onRateChange?: ReactEventHandler<T>;\n        onRateChangeCapture?: ReactEventHandler<T>;\n        onSeeked?: ReactEventHandler<T>;\n        onSeekedCapture?: ReactEventHandler<T>;\n        onSeeking?: ReactEventHandler<T>;\n        onSeekingCapture?: ReactEventHandler<T>;\n        onStalled?: ReactEventHandler<T>;\n        onStalledCapture?: ReactEventHandler<T>;\n        onSuspend?: ReactEventHandler<T>;\n        onSuspendCapture?: ReactEventHandler<T>;\n        onTimeUpdate?: ReactEventHandler<T>;\n        onTimeUpdateCapture?: ReactEventHandler<T>;\n        onVolumeChange?: ReactEventHandler<T>;\n        onVolumeChangeCapture?: ReactEventHandler<T>;\n        onWaiting?: ReactEventHandler<T>;\n        onWaitingCapture?: ReactEventHandler<T>;\n\n        // MouseEvents\n        onAuxClick?: MouseEventHandler<T>;\n        onAuxClickCapture?: MouseEventHandler<T>;\n        onClick?: MouseEventHandler<T>;\n        onClickCapture?: MouseEventHandler<T>;\n        onContextMenu?: MouseEventHandler<T>;\n        onContextMenuCapture?: MouseEventHandler<T>;\n        onDoubleClick?: MouseEventHandler<T>;\n        onDoubleClickCapture?: MouseEventHandler<T>;\n        onDrag?: DragEventHandler<T>;\n        onDragCapture?: DragEventHandler<T>;\n        onDragEnd?: DragEventHandler<T>;\n        onDragEndCapture?: DragEventHandler<T>;\n        onDragEnter?: DragEventHandler<T>;\n        onDragEnterCapture?: DragEventHandler<T>;\n        onDragExit?: DragEventHandler<T>;\n        onDragExitCapture?: DragEventHandler<T>;\n        onDragLeave?: DragEventHandler<T>;\n        onDragLeaveCapture?: DragEventHandler<T>;\n        onDragOver?: DragEventHandler<T>;\n        onDragOverCapture?: DragEventHandler<T>;\n        onDragStart?: DragEventHandler<T>;\n        onDragStartCapture?: DragEventHandler<T>;\n        onDrop?: DragEventHandler<T>;\n        onDropCapture?: DragEventHandler<T>;\n        onMouseDown?: MouseEventHandler<T>;\n        onMouseDownCapture?: MouseEventHandler<T>;\n        onMouseEnter?: MouseEventHandler<T>;\n        onMouseLeave?: MouseEventHandler<T>;\n        onMouseMove?: MouseEventHandler<T>;\n        onMouseMoveCapture?: MouseEventHandler<T>;\n        onMouseOut?: MouseEventHandler<T>;\n        onMouseOutCapture?: MouseEventHandler<T>;\n        onMouseOver?: MouseEventHandler<T>;\n        onMouseOverCapture?: MouseEventHandler<T>;\n        onMouseUp?: MouseEventHandler<T>;\n        onMouseUpCapture?: MouseEventHandler<T>;\n\n        // Selection Events\n        onSelect?: ReactEventHandler<T>;\n        onSelectCapture?: ReactEventHandler<T>;\n\n        // Touch Events\n        onTouchCancel?: TouchEventHandler<T>;\n        onTouchCancelCapture?: TouchEventHandler<T>;\n        onTouchEnd?: TouchEventHandler<T>;\n        onTouchEndCapture?: TouchEventHandler<T>;\n        onTouchMove?: TouchEventHandler<T>;\n        onTouchMoveCapture?: TouchEventHandler<T>;\n        onTouchStart?: TouchEventHandler<T>;\n        onTouchStartCapture?: TouchEventHandler<T>;\n\n        // Pointer Events\n        onPointerDown?: PointerEventHandler<T>;\n        onPointerDownCapture?: PointerEventHandler<T>;\n        onPointerMove?: PointerEventHandler<T>;\n        onPointerMoveCapture?: PointerEventHandler<T>;\n        onPointerUp?: PointerEventHandler<T>;\n        onPointerUpCapture?: PointerEventHandler<T>;\n        onPointerCancel?: PointerEventHandler<T>;\n        onPointerCancelCapture?: PointerEventHandler<T>;\n        onPointerEnter?: PointerEventHandler<T>;\n        onPointerEnterCapture?: PointerEventHandler<T>;\n        onPointerLeave?: PointerEventHandler<T>;\n        onPointerLeaveCapture?: PointerEventHandler<T>;\n        onPointerOver?: PointerEventHandler<T>;\n        onPointerOverCapture?: PointerEventHandler<T>;\n        onPointerOut?: PointerEventHandler<T>;\n        onPointerOutCapture?: PointerEventHandler<T>;\n        onGotPointerCapture?: PointerEventHandler<T>;\n        onGotPointerCaptureCapture?: PointerEventHandler<T>;\n        onLostPointerCapture?: PointerEventHandler<T>;\n        onLostPointerCaptureCapture?: PointerEventHandler<T>;\n\n        // UI Events\n        onScroll?: UIEventHandler<T>;\n        onScrollCapture?: UIEventHandler<T>;\n\n        // Wheel Events\n        onWheel?: WheelEventHandler<T>;\n        onWheelCapture?: WheelEventHandler<T>;\n\n        // Animation Events\n        onAnimationStart?: AnimationEventHandler<T>;\n        onAnimationStartCapture?: AnimationEventHandler<T>;\n        onAnimationEnd?: AnimationEventHandler<T>;\n        onAnimationEndCapture?: AnimationEventHandler<T>;\n        onAnimationIteration?: AnimationEventHandler<T>;\n        onAnimationIterationCapture?: AnimationEventHandler<T>;\n\n        // Transition Events\n        onTransitionEnd?: TransitionEventHandler<T>;\n        onTransitionEndCapture?: TransitionEventHandler<T>;\n    }\n\n    export interface CSSProperties extends CSS.Properties<string | number> {\n        /**\n         * The index signature was removed to enable closed typing for style\n         * using CSSType. You're able to use type assertion or module augmentation\n         * to add properties or an index signature of your own.\n         *\n         * For examples and more information, visit:\n         * https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors\n         */\n    }\n\n    // All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/\n    interface AriaAttributes {\n        /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */\n        'aria-activedescendant'?: string;\n        /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */\n        'aria-atomic'?: boolean | 'false' | 'true';\n        /**\n         * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\n         * presented if they are made.\n         */\n        'aria-autocomplete'?: 'none' | 'inline' | 'list' | 'both';\n        /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */\n        'aria-busy'?: boolean | 'false' | 'true';\n        /**\n         * Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n         * @see aria-pressed @see aria-selected.\n         */\n        'aria-checked'?: boolean | 'false' | 'mixed' | 'true';\n        /**\n         * Defines the total number of columns in a table, grid, or treegrid.\n         * @see aria-colindex.\n         */\n        'aria-colcount'?: number;\n        /**\n         * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n         * @see aria-colcount @see aria-colspan.\n         */\n        'aria-colindex'?: number;\n        /**\n         * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-colindex @see aria-rowspan.\n         */\n        'aria-colspan'?: number;\n        /**\n         * Identifies the element (or elements) whose contents or presence are controlled by the current element.\n         * @see aria-owns.\n         */\n        'aria-controls'?: string;\n        /** Indicates the element that represents the current item within a container or set of related elements. */\n        'aria-current'?: boolean | 'false' | 'true' | 'page' | 'step' | 'location' | 'date' | 'time';\n        /**\n         * Identifies the element (or elements) that describes the object.\n         * @see aria-labelledby\n         */\n        'aria-describedby'?: string;\n        /**\n         * Identifies the element that provides a detailed, extended description for the object.\n         * @see aria-describedby.\n         */\n        'aria-details'?: string;\n        /**\n         * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n         * @see aria-hidden @see aria-readonly.\n         */\n        'aria-disabled'?: boolean | 'false' | 'true';\n        /**\n         * Indicates what functions can be performed when a dragged object is released on the drop target.\n         * @deprecated in ARIA 1.1\n         */\n        'aria-dropeffect'?: 'none' | 'copy' | 'execute' | 'link' | 'move' | 'popup';\n        /**\n         * Identifies the element that provides an error message for the object.\n         * @see aria-invalid @see aria-describedby.\n         */\n        'aria-errormessage'?: string;\n        /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */\n        'aria-expanded'?: boolean | 'false' | 'true';\n        /**\n         * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\n         * allows assistive technology to override the general default of reading in document source order.\n         */\n        'aria-flowto'?: string;\n        /**\n         * Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n         * @deprecated in ARIA 1.1\n         */\n        'aria-grabbed'?: boolean | 'false' | 'true';\n        /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */\n        'aria-haspopup'?: boolean | 'false' | 'true' | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog';\n        /**\n         * Indicates whether the element is exposed to an accessibility API.\n         * @see aria-disabled.\n         */\n        'aria-hidden'?: boolean | 'false' | 'true';\n        /**\n         * Indicates the entered value does not conform to the format expected by the application.\n         * @see aria-errormessage.\n         */\n        'aria-invalid'?: boolean | 'false' | 'true' | 'grammar' | 'spelling';\n        /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */\n        'aria-keyshortcuts'?: string;\n        /**\n         * Defines a string value that labels the current element.\n         * @see aria-labelledby.\n         */\n        'aria-label'?: string;\n        /**\n         * Identifies the element (or elements) that labels the current element.\n         * @see aria-describedby.\n         */\n        'aria-labelledby'?: string;\n        /** Defines the hierarchical level of an element within a structure. */\n        'aria-level'?: number;\n        /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */\n        'aria-live'?: 'off' | 'assertive' | 'polite';\n        /** Indicates whether an element is modal when displayed. */\n        'aria-modal'?: boolean | 'false' | 'true';\n        /** Indicates whether a text box accepts multiple lines of input or only a single line. */\n        'aria-multiline'?: boolean | 'false' | 'true';\n        /** Indicates that the user may select more than one item from the current selectable descendants. */\n        'aria-multiselectable'?: boolean | 'false' | 'true';\n        /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */\n        'aria-orientation'?: 'horizontal' | 'vertical';\n        /**\n         * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\n         * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n         * @see aria-controls.\n         */\n        'aria-owns'?: string;\n        /**\n         * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\n         * A hint could be a sample value or a brief description of the expected format.\n         */\n        'aria-placeholder'?: string;\n        /**\n         * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-setsize.\n         */\n        'aria-posinset'?: number;\n        /**\n         * Indicates the current \"pressed\" state of toggle buttons.\n         * @see aria-checked @see aria-selected.\n         */\n        'aria-pressed'?: boolean | 'false' | 'mixed' | 'true';\n        /**\n         * Indicates that the element is not editable, but is otherwise operable.\n         * @see aria-disabled.\n         */\n        'aria-readonly'?: boolean | 'false' | 'true';\n        /**\n         * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n         * @see aria-atomic.\n         */\n        'aria-relevant'?: 'additions' | 'additions text' | 'all' | 'removals' | 'text';\n        /** Indicates that user input is required on the element before a form may be submitted. */\n        'aria-required'?: boolean | 'false' | 'true';\n        /** Defines a human-readable, author-localized description for the role of an element. */\n        'aria-roledescription'?: string;\n        /**\n         * Defines the total number of rows in a table, grid, or treegrid.\n         * @see aria-rowindex.\n         */\n        'aria-rowcount'?: number;\n        /**\n         * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n         * @see aria-rowcount @see aria-rowspan.\n         */\n        'aria-rowindex'?: number;\n        /**\n         * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-rowindex @see aria-colspan.\n         */\n        'aria-rowspan'?: number;\n        /**\n         * Indicates the current \"selected\" state of various widgets.\n         * @see aria-checked @see aria-pressed.\n         */\n        'aria-selected'?: boolean | 'false' | 'true';\n        /**\n         * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-posinset.\n         */\n        'aria-setsize'?: number;\n        /** Indicates if items in a table or grid are sorted in ascending or descending order. */\n        'aria-sort'?: 'none' | 'ascending' | 'descending' | 'other';\n        /** Defines the maximum allowed value for a range widget. */\n        'aria-valuemax'?: number;\n        /** Defines the minimum allowed value for a range widget. */\n        'aria-valuemin'?: number;\n        /**\n         * Defines the current value for a range widget.\n         * @see aria-valuetext.\n         */\n        'aria-valuenow'?: number;\n        /** Defines the human readable text alternative of aria-valuenow for a range widget. */\n        'aria-valuetext'?: string;\n    }\n\n    interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // React-specific Attributes\n        defaultChecked?: boolean;\n        defaultValue?: string | string[];\n        suppressContentEditableWarning?: boolean;\n        suppressHydrationWarning?: boolean;\n\n        // Standard HTML Attributes\n        accessKey?: string;\n        className?: string;\n        contentEditable?: boolean;\n        contextMenu?: string;\n        dir?: string;\n        draggable?: boolean;\n        hidden?: boolean;\n        id?: string;\n        lang?: string;\n        placeholder?: string;\n        slot?: string;\n        spellCheck?: boolean;\n        style?: CSSProperties;\n        tabIndex?: number;\n        title?: string;\n\n        // Unknown\n        inputMode?: string;\n        is?: string;\n        radioGroup?: string; // <command>, <menuitem>\n\n        // WAI-ARIA\n        role?: string;\n\n        // RDFa Attributes\n        about?: string;\n        datatype?: string;\n        inlist?: any;\n        prefix?: string;\n        property?: string;\n        resource?: string;\n        typeof?: string;\n        vocab?: string;\n\n        // Non-standard Attributes\n        autoCapitalize?: string;\n        autoCorrect?: string;\n        autoSave?: string;\n        color?: string;\n        itemProp?: string;\n        itemScope?: boolean;\n        itemType?: string;\n        itemID?: string;\n        itemRef?: string;\n        results?: number;\n        security?: string;\n        unselectable?: 'on' | 'off';\n    }\n\n    interface AllHTMLAttributes<T> extends HTMLAttributes<T> {\n        // Standard HTML Attributes\n        accept?: string;\n        acceptCharset?: string;\n        action?: string;\n        allowFullScreen?: boolean;\n        allowTransparency?: boolean;\n        alt?: string;\n        as?: string;\n        async?: boolean;\n        autoComplete?: string;\n        autoFocus?: boolean;\n        autoPlay?: boolean;\n        capture?: boolean | string;\n        cellPadding?: number | string;\n        cellSpacing?: number | string;\n        charSet?: string;\n        challenge?: string;\n        checked?: boolean;\n        cite?: string;\n        classID?: string;\n        cols?: number;\n        colSpan?: number;\n        content?: string;\n        controls?: boolean;\n        coords?: string;\n        crossOrigin?: string;\n        data?: string;\n        dateTime?: string;\n        default?: boolean;\n        defer?: boolean;\n        disabled?: boolean;\n        download?: any;\n        encType?: string;\n        form?: string;\n        formAction?: string;\n        formEncType?: string;\n        formMethod?: string;\n        formNoValidate?: boolean;\n        formTarget?: string;\n        frameBorder?: number | string;\n        headers?: string;\n        height?: number | string;\n        high?: number;\n        href?: string;\n        hrefLang?: string;\n        htmlFor?: string;\n        httpEquiv?: string;\n        integrity?: string;\n        keyParams?: string;\n        keyType?: string;\n        kind?: string;\n        label?: string;\n        list?: string;\n        loop?: boolean;\n        low?: number;\n        manifest?: string;\n        marginHeight?: number;\n        marginWidth?: number;\n        max?: number | string;\n        maxLength?: number;\n        media?: string;\n        mediaGroup?: string;\n        method?: string;\n        min?: number | string;\n        minLength?: number;\n        multiple?: boolean;\n        muted?: boolean;\n        name?: string;\n        nonce?: string;\n        noValidate?: boolean;\n        open?: boolean;\n        optimum?: number;\n        pattern?: string;\n        placeholder?: string;\n        playsInline?: boolean;\n        poster?: string;\n        preload?: string;\n        readOnly?: boolean;\n        rel?: string;\n        required?: boolean;\n        reversed?: boolean;\n        rows?: number;\n        rowSpan?: number;\n        sandbox?: string;\n        scope?: string;\n        scoped?: boolean;\n        scrolling?: string;\n        seamless?: boolean;\n        selected?: boolean;\n        shape?: string;\n        size?: number;\n        sizes?: string;\n        span?: number;\n        src?: string;\n        srcDoc?: string;\n        srcLang?: string;\n        srcSet?: string;\n        start?: number;\n        step?: number | string;\n        summary?: string;\n        target?: string;\n        type?: string;\n        useMap?: string;\n        value?: string | string[] | number;\n        width?: number | string;\n        wmode?: string;\n        wrap?: string;\n    }\n\n    interface AnchorHTMLAttributes<T> extends HTMLAttributes<T> {\n        download?: any;\n        href?: string;\n        hrefLang?: string;\n        media?: string;\n        ping?: string;\n        rel?: string;\n        target?: string;\n        type?: string;\n        referrerPolicy?: string;\n    }\n\n    // tslint:disable-next-line:no-empty-interface\n    interface AudioHTMLAttributes<T> extends MediaHTMLAttributes<T> {}\n\n    interface AreaHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string;\n        coords?: string;\n        download?: any;\n        href?: string;\n        hrefLang?: string;\n        media?: string;\n        rel?: string;\n        shape?: string;\n        target?: string;\n    }\n\n    interface BaseHTMLAttributes<T> extends HTMLAttributes<T> {\n        href?: string;\n        target?: string;\n    }\n\n    interface BlockquoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n    }\n\n    interface ButtonHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoFocus?: boolean;\n        disabled?: boolean;\n        form?: string;\n        formAction?: string;\n        formEncType?: string;\n        formMethod?: string;\n        formNoValidate?: boolean;\n        formTarget?: string;\n        name?: string;\n        type?: 'submit' | 'reset' | 'button';\n        value?: string | string[] | number;\n    }\n\n    interface CanvasHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string;\n        width?: number | string;\n    }\n\n    interface ColHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number;\n        width?: number | string;\n    }\n\n    interface ColgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number;\n    }\n\n    interface DataHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | string[] | number;\n    }\n\n    interface DetailsHTMLAttributes<T> extends HTMLAttributes<T> {\n        open?: boolean;\n    }\n\n    interface DelHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n        dateTime?: string;\n    }\n\n    interface DialogHTMLAttributes<T> extends HTMLAttributes<T> {\n        open?: boolean;\n    }\n\n    interface EmbedHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string;\n        src?: string;\n        type?: string;\n        width?: number | string;\n    }\n\n    interface FieldsetHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean;\n        form?: string;\n        name?: string;\n    }\n\n    interface FormHTMLAttributes<T> extends HTMLAttributes<T> {\n        acceptCharset?: string;\n        action?: string;\n        autoComplete?: string;\n        encType?: string;\n        method?: string;\n        name?: string;\n        noValidate?: boolean;\n        target?: string;\n    }\n\n    interface HtmlHTMLAttributes<T> extends HTMLAttributes<T> {\n        manifest?: string;\n    }\n\n    interface IframeHTMLAttributes<T> extends HTMLAttributes<T> {\n        allow?: string;\n        allowFullScreen?: boolean;\n        allowTransparency?: boolean;\n        frameBorder?: number | string;\n        height?: number | string;\n        marginHeight?: number;\n        marginWidth?: number;\n        name?: string;\n        referrerPolicy?: string;\n        sandbox?: string;\n        scrolling?: string;\n        seamless?: boolean;\n        src?: string;\n        srcDoc?: string;\n        width?: number | string;\n    }\n\n    interface ImgHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\";\n        decoding?: \"async\" | \"auto\" | \"sync\";\n        height?: number | string;\n        sizes?: string;\n        src?: string;\n        srcSet?: string;\n        useMap?: string;\n        width?: number | string;\n    }\n\n    interface InsHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n        dateTime?: string;\n    }\n\n    interface InputHTMLAttributes<T> extends HTMLAttributes<T> {\n        accept?: string;\n        alt?: string;\n        autoComplete?: string;\n        autoFocus?: boolean;\n        capture?: boolean | string; // https://www.w3.org/TR/html-media-capture/#the-capture-attribute\n        checked?: boolean;\n        crossOrigin?: string;\n        disabled?: boolean;\n        form?: string;\n        formAction?: string;\n        formEncType?: string;\n        formMethod?: string;\n        formNoValidate?: boolean;\n        formTarget?: string;\n        height?: number | string;\n        list?: string;\n        max?: number | string;\n        maxLength?: number;\n        min?: number | string;\n        minLength?: number;\n        multiple?: boolean;\n        name?: string;\n        pattern?: string;\n        placeholder?: string;\n        readOnly?: boolean;\n        required?: boolean;\n        size?: number;\n        src?: string;\n        step?: number | string;\n        type?: string;\n        value?: string | string[] | number;\n        width?: number | string;\n\n        onChange?: ChangeEventHandler<T>;\n    }\n\n    interface KeygenHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoFocus?: boolean;\n        challenge?: string;\n        disabled?: boolean;\n        form?: string;\n        keyType?: string;\n        keyParams?: string;\n        name?: string;\n    }\n\n    interface LabelHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string;\n        htmlFor?: string;\n    }\n\n    interface LiHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | string[] | number;\n    }\n\n    interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {\n        as?: string;\n        crossOrigin?: string;\n        href?: string;\n        hrefLang?: string;\n        integrity?: string;\n        media?: string;\n        rel?: string;\n        sizes?: string;\n        type?: string;\n    }\n\n    interface MapHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string;\n    }\n\n    interface MenuHTMLAttributes<T> extends HTMLAttributes<T> {\n        type?: string;\n    }\n\n    interface MediaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoPlay?: boolean;\n        controls?: boolean;\n        controlsList?: string;\n        crossOrigin?: string;\n        loop?: boolean;\n        mediaGroup?: string;\n        muted?: boolean;\n        playsinline?: boolean;\n        preload?: string;\n        src?: string;\n    }\n\n    interface MetaHTMLAttributes<T> extends HTMLAttributes<T> {\n        charSet?: string;\n        content?: string;\n        httpEquiv?: string;\n        name?: string;\n    }\n\n    interface MeterHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string;\n        high?: number;\n        low?: number;\n        max?: number | string;\n        min?: number | string;\n        optimum?: number;\n        value?: string | string[] | number;\n    }\n\n    interface QuoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n    }\n\n    interface ObjectHTMLAttributes<T> extends HTMLAttributes<T> {\n        classID?: string;\n        data?: string;\n        form?: string;\n        height?: number | string;\n        name?: string;\n        type?: string;\n        useMap?: string;\n        width?: number | string;\n        wmode?: string;\n    }\n\n    interface OlHTMLAttributes<T> extends HTMLAttributes<T> {\n        reversed?: boolean;\n        start?: number;\n        type?: '1' | 'a' | 'A' | 'i' | 'I';\n    }\n\n    interface OptgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean;\n        label?: string;\n    }\n\n    interface OptionHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean;\n        label?: string;\n        selected?: boolean;\n        value?: string | string[] | number;\n    }\n\n    interface OutputHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string;\n        htmlFor?: string;\n        name?: string;\n    }\n\n    interface ParamHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string;\n        value?: string | string[] | number;\n    }\n\n    interface ProgressHTMLAttributes<T> extends HTMLAttributes<T> {\n        max?: number | string;\n        value?: string | string[] | number;\n    }\n\n    interface ScriptHTMLAttributes<T> extends HTMLAttributes<T> {\n        async?: boolean;\n        charSet?: string;\n        crossOrigin?: string;\n        defer?: boolean;\n        integrity?: string;\n        noModule?: boolean;\n        nonce?: string;\n        src?: string;\n        type?: string;\n    }\n\n    interface SelectHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoComplete?: string;\n        autoFocus?: boolean;\n        disabled?: boolean;\n        form?: string;\n        multiple?: boolean;\n        name?: string;\n        required?: boolean;\n        size?: number;\n        value?: string | string[] | number;\n        onChange?: ChangeEventHandler<T>;\n    }\n\n    interface SourceHTMLAttributes<T> extends HTMLAttributes<T> {\n        media?: string;\n        sizes?: string;\n        src?: string;\n        srcSet?: string;\n        type?: string;\n    }\n\n    interface StyleHTMLAttributes<T> extends HTMLAttributes<T> {\n        media?: string;\n        nonce?: string;\n        scoped?: boolean;\n        type?: string;\n    }\n\n    interface TableHTMLAttributes<T> extends HTMLAttributes<T> {\n        cellPadding?: number | string;\n        cellSpacing?: number | string;\n        summary?: string;\n    }\n\n    interface TextareaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoComplete?: string;\n        autoFocus?: boolean;\n        cols?: number;\n        dirName?: string;\n        disabled?: boolean;\n        form?: string;\n        maxLength?: number;\n        minLength?: number;\n        name?: string;\n        placeholder?: string;\n        readOnly?: boolean;\n        required?: boolean;\n        rows?: number;\n        value?: string | string[] | number;\n        wrap?: string;\n\n        onChange?: ChangeEventHandler<T>;\n    }\n\n    interface TdHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\";\n        colSpan?: number;\n        headers?: string;\n        rowSpan?: number;\n        scope?: string;\n        valign?: \"top\" | \"middle\" | \"bottom\" | \"baseline\";\n    }\n\n    interface ThHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\";\n        colSpan?: number;\n        headers?: string;\n        rowSpan?: number;\n        scope?: string;\n    }\n\n    interface TimeHTMLAttributes<T> extends HTMLAttributes<T> {\n        dateTime?: string;\n    }\n\n    interface TrackHTMLAttributes<T> extends HTMLAttributes<T> {\n        default?: boolean;\n        kind?: string;\n        label?: string;\n        src?: string;\n        srcLang?: string;\n    }\n\n    interface VideoHTMLAttributes<T> extends MediaHTMLAttributes<T> {\n        height?: number | string;\n        playsInline?: boolean;\n        poster?: string;\n        width?: number | string;\n        disablePictureInPicture?: boolean;\n    }\n\n    // this list is \"complete\" in that it contains every SVG attribute\n    // that React supports, but the types can be improved.\n    // Full list here: https://facebook.github.io/react/docs/dom-elements.html\n    //\n    // The three broad type categories are (in order of restrictiveness):\n    //   - \"number | string\"\n    //   - \"string\"\n    //   - union of string literals\n    interface SVGAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // Attributes which also defined in HTMLAttributes\n        // See comment in SVGDOMPropertyConfig.js\n        className?: string;\n        color?: string;\n        height?: number | string;\n        id?: string;\n        lang?: string;\n        max?: number | string;\n        media?: string;\n        method?: string;\n        min?: number | string;\n        name?: string;\n        style?: CSSProperties;\n        target?: string;\n        type?: string;\n        width?: number | string;\n\n        // Other HTML properties supported by SVG elements in browsers\n        role?: string;\n        tabIndex?: number;\n\n        // SVG Specific attributes\n        accentHeight?: number | string;\n        accumulate?: \"none\" | \"sum\";\n        additive?: \"replace\" | \"sum\";\n        alignmentBaseline?: \"auto\" | \"baseline\" | \"before-edge\" | \"text-before-edge\" | \"middle\" | \"central\" | \"after-edge\" |\n        \"text-after-edge\" | \"ideographic\" | \"alphabetic\" | \"hanging\" | \"mathematical\" | \"inherit\";\n        allowReorder?: \"no\" | \"yes\";\n        alphabetic?: number | string;\n        amplitude?: number | string;\n        arabicForm?: \"initial\" | \"medial\" | \"terminal\" | \"isolated\";\n        ascent?: number | string;\n        attributeName?: string;\n        attributeType?: string;\n        autoReverse?: number | string;\n        azimuth?: number | string;\n        baseFrequency?: number | string;\n        baselineShift?: number | string;\n        baseProfile?: number | string;\n        bbox?: number | string;\n        begin?: number | string;\n        bias?: number | string;\n        by?: number | string;\n        calcMode?: number | string;\n        capHeight?: number | string;\n        clip?: number | string;\n        clipPath?: string;\n        clipPathUnits?: number | string;\n        clipRule?: number | string;\n        colorInterpolation?: number | string;\n        colorInterpolationFilters?: \"auto\" | \"sRGB\" | \"linearRGB\" | \"inherit\";\n        colorProfile?: number | string;\n        colorRendering?: number | string;\n        contentScriptType?: number | string;\n        contentStyleType?: number | string;\n        cursor?: number | string;\n        cx?: number | string;\n        cy?: number | string;\n        d?: string;\n        decelerate?: number | string;\n        descent?: number | string;\n        diffuseConstant?: number | string;\n        direction?: number | string;\n        display?: number | string;\n        divisor?: number | string;\n        dominantBaseline?: number | string;\n        dur?: number | string;\n        dx?: number | string;\n        dy?: number | string;\n        edgeMode?: number | string;\n        elevation?: number | string;\n        enableBackground?: number | string;\n        end?: number | string;\n        exponent?: number | string;\n        externalResourcesRequired?: number | string;\n        fill?: string;\n        fillOpacity?: number | string;\n        fillRule?: \"nonzero\" | \"evenodd\" | \"inherit\";\n        filter?: string;\n        filterRes?: number | string;\n        filterUnits?: number | string;\n        floodColor?: number | string;\n        floodOpacity?: number | string;\n        focusable?: number | string;\n        fontFamily?: string;\n        fontSize?: number | string;\n        fontSizeAdjust?: number | string;\n        fontStretch?: number | string;\n        fontStyle?: number | string;\n        fontVariant?: number | string;\n        fontWeight?: number | string;\n        format?: number | string;\n        from?: number | string;\n        fx?: number | string;\n        fy?: number | string;\n        g1?: number | string;\n        g2?: number | string;\n        glyphName?: number | string;\n        glyphOrientationHorizontal?: number | string;\n        glyphOrientationVertical?: number | string;\n        glyphRef?: number | string;\n        gradientTransform?: string;\n        gradientUnits?: string;\n        hanging?: number | string;\n        horizAdvX?: number | string;\n        horizOriginX?: number | string;\n        href?: string;\n        ideographic?: number | string;\n        imageRendering?: number | string;\n        in2?: number | string;\n        in?: string;\n        intercept?: number | string;\n        k1?: number | string;\n        k2?: number | string;\n        k3?: number | string;\n        k4?: number | string;\n        k?: number | string;\n        kernelMatrix?: number | string;\n        kernelUnitLength?: number | string;\n        kerning?: number | string;\n        keyPoints?: number | string;\n        keySplines?: number | string;\n        keyTimes?: number | string;\n        lengthAdjust?: number | string;\n        letterSpacing?: number | string;\n        lightingColor?: number | string;\n        limitingConeAngle?: number | string;\n        local?: number | string;\n        markerEnd?: string;\n        markerHeight?: number | string;\n        markerMid?: string;\n        markerStart?: string;\n        markerUnits?: number | string;\n        markerWidth?: number | string;\n        mask?: string;\n        maskContentUnits?: number | string;\n        maskUnits?: number | string;\n        mathematical?: number | string;\n        mode?: number | string;\n        numOctaves?: number | string;\n        offset?: number | string;\n        opacity?: number | string;\n        operator?: number | string;\n        order?: number | string;\n        orient?: number | string;\n        orientation?: number | string;\n        origin?: number | string;\n        overflow?: number | string;\n        overlinePosition?: number | string;\n        overlineThickness?: number | string;\n        paintOrder?: number | string;\n        panose1?: number | string;\n        pathLength?: number | string;\n        patternContentUnits?: string;\n        patternTransform?: number | string;\n        patternUnits?: string;\n        pointerEvents?: number | string;\n        points?: string;\n        pointsAtX?: number | string;\n        pointsAtY?: number | string;\n        pointsAtZ?: number | string;\n        preserveAlpha?: number | string;\n        preserveAspectRatio?: string;\n        primitiveUnits?: number | string;\n        r?: number | string;\n        radius?: number | string;\n        refX?: number | string;\n        refY?: number | string;\n        renderingIntent?: number | string;\n        repeatCount?: number | string;\n        repeatDur?: number | string;\n        requiredExtensions?: number | string;\n        requiredFeatures?: number | string;\n        restart?: number | string;\n        result?: string;\n        rotate?: number | string;\n        rx?: number | string;\n        ry?: number | string;\n        scale?: number | string;\n        seed?: number | string;\n        shapeRendering?: number | string;\n        slope?: number | string;\n        spacing?: number | string;\n        specularConstant?: number | string;\n        specularExponent?: number | string;\n        speed?: number | string;\n        spreadMethod?: string;\n        startOffset?: number | string;\n        stdDeviation?: number | string;\n        stemh?: number | string;\n        stemv?: number | string;\n        stitchTiles?: number | string;\n        stopColor?: string;\n        stopOpacity?: number | string;\n        strikethroughPosition?: number | string;\n        strikethroughThickness?: number | string;\n        string?: number | string;\n        stroke?: string;\n        strokeDasharray?: string | number;\n        strokeDashoffset?: string | number;\n        strokeLinecap?: \"butt\" | \"round\" | \"square\" | \"inherit\";\n        strokeLinejoin?: \"miter\" | \"round\" | \"bevel\" | \"inherit\";\n        strokeMiterlimit?: number | string;\n        strokeOpacity?: number | string;\n        strokeWidth?: number | string;\n        surfaceScale?: number | string;\n        systemLanguage?: number | string;\n        tableValues?: number | string;\n        targetX?: number | string;\n        targetY?: number | string;\n        textAnchor?: string;\n        textDecoration?: number | string;\n        textLength?: number | string;\n        textRendering?: number | string;\n        to?: number | string;\n        transform?: string;\n        u1?: number | string;\n        u2?: number | string;\n        underlinePosition?: number | string;\n        underlineThickness?: number | string;\n        unicode?: number | string;\n        unicodeBidi?: number | string;\n        unicodeRange?: number | string;\n        unitsPerEm?: number | string;\n        vAlphabetic?: number | string;\n        values?: string;\n        vectorEffect?: number | string;\n        version?: string;\n        vertAdvY?: number | string;\n        vertOriginX?: number | string;\n        vertOriginY?: number | string;\n        vHanging?: number | string;\n        vIdeographic?: number | string;\n        viewBox?: string;\n        viewTarget?: number | string;\n        visibility?: number | string;\n        vMathematical?: number | string;\n        widths?: number | string;\n        wordSpacing?: number | string;\n        writingMode?: number | string;\n        x1?: number | string;\n        x2?: number | string;\n        x?: number | string;\n        xChannelSelector?: string;\n        xHeight?: number | string;\n        xlinkActuate?: string;\n        xlinkArcrole?: string;\n        xlinkHref?: string;\n        xlinkRole?: string;\n        xlinkShow?: string;\n        xlinkTitle?: string;\n        xlinkType?: string;\n        xmlBase?: string;\n        xmlLang?: string;\n        xmlns?: string;\n        xmlnsXlink?: string;\n        xmlSpace?: string;\n        y1?: number | string;\n        y2?: number | string;\n        y?: number | string;\n        yChannelSelector?: string;\n        z?: number | string;\n        zoomAndPan?: string;\n    }\n\n    interface WebViewHTMLAttributes<T> extends HTMLAttributes<T> {\n        allowFullScreen?: boolean;\n        allowpopups?: boolean;\n        autoFocus?: boolean;\n        autosize?: boolean;\n        blinkfeatures?: string;\n        disableblinkfeatures?: string;\n        disableguestresize?: boolean;\n        disablewebsecurity?: boolean;\n        guestinstance?: string;\n        httpreferrer?: string;\n        nodeintegration?: boolean;\n        partition?: string;\n        plugins?: boolean;\n        preload?: string;\n        src?: string;\n        useragent?: string;\n        webpreferences?: string;\n    }\n\n    //\n    // React.DOM\n    // ----------------------------------------------------------------------\n\n    interface ReactHTML {\n        a: DetailedHTMLFactory<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n        abbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        address: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        area: DetailedHTMLFactory<AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n        article: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        aside: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        audio: DetailedHTMLFactory<AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n        b: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        base: DetailedHTMLFactory<BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n        bdi: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        bdo: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        big: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        blockquote: DetailedHTMLFactory<BlockquoteHTMLAttributes<HTMLElement>, HTMLElement>;\n        body: DetailedHTMLFactory<HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n        br: DetailedHTMLFactory<HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n        button: DetailedHTMLFactory<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n        canvas: DetailedHTMLFactory<CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n        caption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        cite: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        code: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        col: DetailedHTMLFactory<ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n        colgroup: DetailedHTMLFactory<ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n        data: DetailedHTMLFactory<DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n        datalist: DetailedHTMLFactory<HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n        dd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        del: DetailedHTMLFactory<DelHTMLAttributes<HTMLElement>, HTMLElement>;\n        details: DetailedHTMLFactory<DetailsHTMLAttributes<HTMLElement>, HTMLElement>;\n        dfn: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        dialog: DetailedHTMLFactory<DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n        div: DetailedHTMLFactory<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n        dl: DetailedHTMLFactory<HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n        dt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        em: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        embed: DetailedHTMLFactory<EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n        fieldset: DetailedHTMLFactory<FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n        figcaption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        figure: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        footer: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        form: DetailedHTMLFactory<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n        h1: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h2: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h3: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h4: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h5: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h6: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        head: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLHeadElement>;\n        header: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        hgroup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        hr: DetailedHTMLFactory<HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n        html: DetailedHTMLFactory<HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n        i: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        iframe: DetailedHTMLFactory<IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n        img: DetailedHTMLFactory<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n        input: DetailedHTMLFactory<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n        ins: DetailedHTMLFactory<InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n        kbd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        keygen: DetailedHTMLFactory<KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n        label: DetailedHTMLFactory<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n        legend: DetailedHTMLFactory<HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n        li: DetailedHTMLFactory<LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n        link: DetailedHTMLFactory<LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n        main: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        map: DetailedHTMLFactory<MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n        mark: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        menu: DetailedHTMLFactory<MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n        menuitem: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        meta: DetailedHTMLFactory<MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n        meter: DetailedHTMLFactory<MeterHTMLAttributes<HTMLElement>, HTMLElement>;\n        nav: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        noscript: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        object: DetailedHTMLFactory<ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n        ol: DetailedHTMLFactory<OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n        optgroup: DetailedHTMLFactory<OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n        option: DetailedHTMLFactory<OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n        output: DetailedHTMLFactory<OutputHTMLAttributes<HTMLElement>, HTMLElement>;\n        p: DetailedHTMLFactory<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n        param: DetailedHTMLFactory<ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n        picture: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        pre: DetailedHTMLFactory<HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n        progress: DetailedHTMLFactory<ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n        q: DetailedHTMLFactory<QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n        rp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        rt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        ruby: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        s: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        samp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        script: DetailedHTMLFactory<ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n        section: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        select: DetailedHTMLFactory<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n        small: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        source: DetailedHTMLFactory<SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n        span: DetailedHTMLFactory<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n        strong: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        style: DetailedHTMLFactory<StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n        sub: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        summary: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        sup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        table: DetailedHTMLFactory<TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n        template: DetailedHTMLFactory<HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n        tbody: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        td: DetailedHTMLFactory<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n        textarea: DetailedHTMLFactory<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n        tfoot: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        th: DetailedHTMLFactory<ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n        thead: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        time: DetailedHTMLFactory<TimeHTMLAttributes<HTMLElement>, HTMLElement>;\n        title: DetailedHTMLFactory<HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n        tr: DetailedHTMLFactory<HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n        track: DetailedHTMLFactory<TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n        u: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        ul: DetailedHTMLFactory<HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n        \"var\": DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        video: DetailedHTMLFactory<VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n        wbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        webview: DetailedHTMLFactory<WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n    }\n\n    interface ReactSVG {\n        animate: SVGFactory;\n        circle: SVGFactory;\n        clipPath: SVGFactory;\n        defs: SVGFactory;\n        desc: SVGFactory;\n        ellipse: SVGFactory;\n        feBlend: SVGFactory;\n        feColorMatrix: SVGFactory;\n        feComponentTransfer: SVGFactory;\n        feComposite: SVGFactory;\n        feConvolveMatrix: SVGFactory;\n        feDiffuseLighting: SVGFactory;\n        feDisplacementMap: SVGFactory;\n        feDistantLight: SVGFactory;\n        feDropShadow: SVGFactory;\n        feFlood: SVGFactory;\n        feFuncA: SVGFactory;\n        feFuncB: SVGFactory;\n        feFuncG: SVGFactory;\n        feFuncR: SVGFactory;\n        feGaussianBlur: SVGFactory;\n        feImage: SVGFactory;\n        feMerge: SVGFactory;\n        feMergeNode: SVGFactory;\n        feMorphology: SVGFactory;\n        feOffset: SVGFactory;\n        fePointLight: SVGFactory;\n        feSpecularLighting: SVGFactory;\n        feSpotLight: SVGFactory;\n        feTile: SVGFactory;\n        feTurbulence: SVGFactory;\n        filter: SVGFactory;\n        foreignObject: SVGFactory;\n        g: SVGFactory;\n        image: SVGFactory;\n        line: SVGFactory;\n        linearGradient: SVGFactory;\n        marker: SVGFactory;\n        mask: SVGFactory;\n        metadata: SVGFactory;\n        path: SVGFactory;\n        pattern: SVGFactory;\n        polygon: SVGFactory;\n        polyline: SVGFactory;\n        radialGradient: SVGFactory;\n        rect: SVGFactory;\n        stop: SVGFactory;\n        svg: SVGFactory;\n        switch: SVGFactory;\n        symbol: SVGFactory;\n        text: SVGFactory;\n        textPath: SVGFactory;\n        tspan: SVGFactory;\n        use: SVGFactory;\n        view: SVGFactory;\n    }\n\n    interface ReactDOM extends ReactHTML, ReactSVG { }\n\n    //\n    // React.PropTypes\n    // ----------------------------------------------------------------------\n\n    type Validator<T> = PropTypes.Validator<T>;\n\n    type Requireable<T> = PropTypes.Requireable<T>;\n\n    type ValidationMap<T> = PropTypes.ValidationMap<T>;\n\n    type WeakValidationMap<T> = {\n        [K in keyof T]?: null extends T[K]\n            ? Validator<T[K] | null | undefined>\n            : undefined extends T[K]\n            ? Validator<T[K] | null | undefined>\n            : Validator<T[K]>\n    };\n\n    interface ReactPropTypes {\n        any: typeof PropTypes.any;\n        array: typeof PropTypes.array;\n        bool: typeof PropTypes.bool;\n        func: typeof PropTypes.func;\n        number: typeof PropTypes.number;\n        object: typeof PropTypes.object;\n        string: typeof PropTypes.string;\n        node: typeof PropTypes.node;\n        element: typeof PropTypes.element;\n        instanceOf: typeof PropTypes.instanceOf;\n        oneOf: typeof PropTypes.oneOf;\n        oneOfType: typeof PropTypes.oneOfType;\n        arrayOf: typeof PropTypes.arrayOf;\n        objectOf: typeof PropTypes.objectOf;\n        shape: typeof PropTypes.shape;\n        exact: typeof PropTypes.exact;\n    }\n\n    //\n    // React.Children\n    // ----------------------------------------------------------------------\n\n    interface ReactChildren {\n        map<T, C>(children: C | C[], fn: (child: C, index: number) => T): T[];\n        forEach<C>(children: C | C[], fn: (child: C, index: number) => void): void;\n        count(children: any): number;\n        only<C>(children: C): C extends any[] ? never : C;\n        toArray<C>(children: C | C[]): C[];\n    }\n\n    //\n    // Browser Interfaces\n    // https://github.com/nikeee/2048-typescript/blob/master/2048/js/touch.d.ts\n    // ----------------------------------------------------------------------\n\n    interface AbstractView {\n        styleMedia: StyleMedia;\n        document: Document;\n    }\n\n    interface Touch {\n        identifier: number;\n        target: EventTarget;\n        screenX: number;\n        screenY: number;\n        clientX: number;\n        clientY: number;\n        pageX: number;\n        pageY: number;\n    }\n\n    interface TouchList {\n        [index: number]: Touch;\n        length: number;\n        item(index: number): Touch;\n        identifiedTouch(identifier: number): Touch;\n    }\n\n    //\n    // Error Interfaces\n    // ----------------------------------------------------------------------\n    interface ErrorInfo {\n        /**\n         * Captures which component contained the exception, and its ancestors.\n         */\n        componentStack: string;\n    }\n}\n\n// naked 'any' type in a conditional type will short circuit and union both the then/else branches\n// so boolean is only resolved for T = any\ntype IsExactlyAny<T> = boolean extends (T extends never ? true : false) ? true : false;\n\ntype ExactlyAnyPropertyKeys<T> = { [K in keyof T]: IsExactlyAny<T[K]> extends true ? K : never }[keyof T];\ntype NotExactlyAnyPropertyKeys<T> = Exclude<keyof T, ExactlyAnyPropertyKeys<T>>;\n\n// Try to resolve ill-defined props like for JS users: props can be any, or sometimes objects with properties of type any\ntype MergePropTypes<P, T> =\n    // Distribute over P in case it is a union type\n    P extends any\n        // If props is type any, use propTypes definitions\n        ? IsExactlyAny<P> extends true ? T :\n            // If declared props have indexed properties, ignore inferred props entirely as keyof gets widened\n            string extends keyof P ? P :\n                // Prefer declared types which are not exactly any\n                & Pick<P, NotExactlyAnyPropertyKeys<P>>\n                // For props which are exactly any, use the type inferred from propTypes if present\n                & Pick<T, Exclude<keyof T, NotExactlyAnyPropertyKeys<P>>>\n                // Keep leftover props not specified in propTypes\n                & Pick<P, Exclude<keyof P, keyof T>>\n        : never;\n\n// Any prop that has a default prop becomes optional, but its type is unchanged\n// Undeclared default props are augmented into the resulting allowable attributes\n// If declared props have indexed properties, ignore default props entirely as keyof gets widened\n// Wrap in an outer-level conditional type to allow distribution over props that are unions\ntype Defaultize<P, D> = P extends any\n    ? string extends keyof P ? P :\n        & Pick<P, Exclude<keyof P, keyof D>>\n        & Partial<Pick<P, Extract<keyof P, keyof D>>>\n        & Partial<Pick<D, Exclude<keyof D, keyof P>>>\n    : never;\n\ntype ReactManagedAttributes<C, P> = C extends { propTypes: infer T; defaultProps: infer D; }\n    ? Defaultize<MergePropTypes<P, PropTypes.InferProps<T>>, D>\n    : C extends { propTypes: infer T; }\n        ? MergePropTypes<P, PropTypes.InferProps<T>>\n        : C extends { defaultProps: infer D; }\n            ? Defaultize<P, D>\n            : P;\n\ndeclare global {\n    namespace JSX {\n        // tslint:disable-next-line:no-empty-interface\n        interface Element extends React.ReactElement<any, any> { }\n        interface ElementClass extends React.Component<any> {\n            render(): React.ReactNode;\n        }\n        interface ElementAttributesProperty { props: {}; }\n        interface ElementChildrenAttribute { children: {}; }\n\n        // We can't recurse forever because type can't be self-referential;\n        // let's assume it's reasonable to do a single React.lazy() around a single React.memo() / vice-versa\n        type LibraryManagedAttributes<C, P> = C extends React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T>\n            ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U>\n                ? ReactManagedAttributes<U, P>\n                : ReactManagedAttributes<T, P>\n            : ReactManagedAttributes<C, P>;\n\n        // tslint:disable-next-line:no-empty-interface\n        interface IntrinsicAttributes extends React.Attributes { }\n        // tslint:disable-next-line:no-empty-interface\n        interface IntrinsicClassAttributes<T> extends React.ClassAttributes<T> { }\n\n        interface IntrinsicElements {\n            // HTML\n            a: React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n            abbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            address: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            area: React.DetailedHTMLProps<React.AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n            article: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            aside: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            audio: React.DetailedHTMLProps<React.AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n            b: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            base: React.DetailedHTMLProps<React.BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n            bdi: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            bdo: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            big: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            blockquote: React.DetailedHTMLProps<React.BlockquoteHTMLAttributes<HTMLElement>, HTMLElement>;\n            body: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n            br: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n            button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n            canvas: React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n            caption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            cite: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            code: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            col: React.DetailedHTMLProps<React.ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n            colgroup: React.DetailedHTMLProps<React.ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n            data: React.DetailedHTMLProps<React.DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n            datalist: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n            dd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            del: React.DetailedHTMLProps<React.DelHTMLAttributes<HTMLElement>, HTMLElement>;\n            details: React.DetailedHTMLProps<React.DetailsHTMLAttributes<HTMLElement>, HTMLElement>;\n            dfn: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            dialog: React.DetailedHTMLProps<React.DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n            div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n            dl: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n            dt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            em: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            embed: React.DetailedHTMLProps<React.EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n            fieldset: React.DetailedHTMLProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n            figcaption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            figure: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            footer: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            form: React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n            h1: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h2: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h3: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h4: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h5: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h6: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            head: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadElement>, HTMLHeadElement>;\n            header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            hgroup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            hr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n            html: React.DetailedHTMLProps<React.HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n            i: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            iframe: React.DetailedHTMLProps<React.IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n            img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n            input: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n            ins: React.DetailedHTMLProps<React.InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n            kbd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            keygen: React.DetailedHTMLProps<React.KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n            label: React.DetailedHTMLProps<React.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n            legend: React.DetailedHTMLProps<React.HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n            li: React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n            link: React.DetailedHTMLProps<React.LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n            main: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            map: React.DetailedHTMLProps<React.MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n            mark: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            menu: React.DetailedHTMLProps<React.MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n            menuitem: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            meta: React.DetailedHTMLProps<React.MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n            meter: React.DetailedHTMLProps<React.MeterHTMLAttributes<HTMLElement>, HTMLElement>;\n            nav: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            noindex: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            noscript: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            object: React.DetailedHTMLProps<React.ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n            ol: React.DetailedHTMLProps<React.OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n            optgroup: React.DetailedHTMLProps<React.OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n            option: React.DetailedHTMLProps<React.OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n            output: React.DetailedHTMLProps<React.OutputHTMLAttributes<HTMLElement>, HTMLElement>;\n            p: React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n            param: React.DetailedHTMLProps<React.ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n            picture: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            pre: React.DetailedHTMLProps<React.HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n            progress: React.DetailedHTMLProps<React.ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n            q: React.DetailedHTMLProps<React.QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n            rp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            rt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            ruby: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            s: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            samp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            script: React.DetailedHTMLProps<React.ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n            section: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            select: React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n            small: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            source: React.DetailedHTMLProps<React.SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n            span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n            strong: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            style: React.DetailedHTMLProps<React.StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n            sub: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            summary: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            sup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            table: React.DetailedHTMLProps<React.TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n            template: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n            tbody: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            td: React.DetailedHTMLProps<React.TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n            textarea: React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n            tfoot: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            th: React.DetailedHTMLProps<React.ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n            thead: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            time: React.DetailedHTMLProps<React.TimeHTMLAttributes<HTMLElement>, HTMLElement>;\n            title: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n            tr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n            track: React.DetailedHTMLProps<React.TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n            u: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            ul: React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n            \"var\": React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            video: React.DetailedHTMLProps<React.VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n            wbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            webview: React.DetailedHTMLProps<React.WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n\n            // SVG\n            svg: React.SVGProps<SVGSVGElement>;\n\n            animate: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now.\n            animateMotion: React.SVGProps<SVGElement>;\n            animateTransform: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateTransformElement but is not in TypeScript's lib.dom.d.ts for now.\n            circle: React.SVGProps<SVGCircleElement>;\n            clipPath: React.SVGProps<SVGClipPathElement>;\n            defs: React.SVGProps<SVGDefsElement>;\n            desc: React.SVGProps<SVGDescElement>;\n            ellipse: React.SVGProps<SVGEllipseElement>;\n            feBlend: React.SVGProps<SVGFEBlendElement>;\n            feColorMatrix: React.SVGProps<SVGFEColorMatrixElement>;\n            feComponentTransfer: React.SVGProps<SVGFEComponentTransferElement>;\n            feComposite: React.SVGProps<SVGFECompositeElement>;\n            feConvolveMatrix: React.SVGProps<SVGFEConvolveMatrixElement>;\n            feDiffuseLighting: React.SVGProps<SVGFEDiffuseLightingElement>;\n            feDisplacementMap: React.SVGProps<SVGFEDisplacementMapElement>;\n            feDistantLight: React.SVGProps<SVGFEDistantLightElement>;\n            feDropShadow: React.SVGProps<SVGFEDropShadowElement>;\n            feFlood: React.SVGProps<SVGFEFloodElement>;\n            feFuncA: React.SVGProps<SVGFEFuncAElement>;\n            feFuncB: React.SVGProps<SVGFEFuncBElement>;\n            feFuncG: React.SVGProps<SVGFEFuncGElement>;\n            feFuncR: React.SVGProps<SVGFEFuncRElement>;\n            feGaussianBlur: React.SVGProps<SVGFEGaussianBlurElement>;\n            feImage: React.SVGProps<SVGFEImageElement>;\n            feMerge: React.SVGProps<SVGFEMergeElement>;\n            feMergeNode: React.SVGProps<SVGFEMergeNodeElement>;\n            feMorphology: React.SVGProps<SVGFEMorphologyElement>;\n            feOffset: React.SVGProps<SVGFEOffsetElement>;\n            fePointLight: React.SVGProps<SVGFEPointLightElement>;\n            feSpecularLighting: React.SVGProps<SVGFESpecularLightingElement>;\n            feSpotLight: React.SVGProps<SVGFESpotLightElement>;\n            feTile: React.SVGProps<SVGFETileElement>;\n            feTurbulence: React.SVGProps<SVGFETurbulenceElement>;\n            filter: React.SVGProps<SVGFilterElement>;\n            foreignObject: React.SVGProps<SVGForeignObjectElement>;\n            g: React.SVGProps<SVGGElement>;\n            image: React.SVGProps<SVGImageElement>;\n            line: React.SVGProps<SVGLineElement>;\n            linearGradient: React.SVGProps<SVGLinearGradientElement>;\n            marker: React.SVGProps<SVGMarkerElement>;\n            mask: React.SVGProps<SVGMaskElement>;\n            metadata: React.SVGProps<SVGMetadataElement>;\n            mpath: React.SVGProps<SVGElement>;\n            path: React.SVGProps<SVGPathElement>;\n            pattern: React.SVGProps<SVGPatternElement>;\n            polygon: React.SVGProps<SVGPolygonElement>;\n            polyline: React.SVGProps<SVGPolylineElement>;\n            radialGradient: React.SVGProps<SVGRadialGradientElement>;\n            rect: React.SVGProps<SVGRectElement>;\n            stop: React.SVGProps<SVGStopElement>;\n            switch: React.SVGProps<SVGSwitchElement>;\n            symbol: React.SVGProps<SVGSymbolElement>;\n            text: React.SVGProps<SVGTextElement>;\n            textPath: React.SVGProps<SVGTextPathElement>;\n            tspan: React.SVGProps<SVGTSpanElement>;\n            use: React.SVGProps<SVGUseElement>;\n            view: React.SVGProps<SVGViewElement>;\n        }\n    }\n}",V=t(222),O=t.n(V);function G(e,n){F.languages.typescript.typescriptDefaults.setCompilerOptions({target:F.languages.typescript.ScriptTarget.ES2016,allowNonTsExtensions:!0,moduleResolution:F.languages.typescript.ModuleResolutionKind.NodeJs,module:F.languages.typescript.ModuleKind.CommonJS,noEmit:!0,typeRoots:["node_modules/@types"],types:["react"],jsx:F.languages.typescript.JsxEmit.React}),F.languages.typescript.typescriptDefaults.addExtraLib(k,"file:///react.d.ts");var t=F.editor.create(e,{value:n,language:"typescript",automaticLayout:!0,fontSize:16,minimap:{enabled:!1},lineNumbers:"off",autoIndent:!0,model:F.editor.createModel("","typescript",F.Uri.file("file:///file.tsx"))});return t.getModel().updateOptions({tabSize:2}),F.editor.setTheme("vs-light"),t}var I=t(193),j={top:!0,right:!1,bottom:!1,left:!1,topRight:!1,bottomRight:!1,bottomLeft:!1,topLeft:!1};var N=t(142);var z=document.createElement("div");document.body.appendChild(z),Object(o.render)(a.a.createElement((function(){var e=Object(I.a)().frames,n=function(){var e=a.a.useState(""),n=T()(e,2),t=n[0],r=n[1],o=Object(D.a)(),i=o.exampleCode,s=o.store,l=a.a.useMemo((function(){return A()(i||"").trim()}),[i]),c=a.a.useCallback((function(e){var n=w(e);history.replaceState(null,null,n),s.setItem("code",e),r(e)}),[]);return a.a.useEffect((function(){var e=window.location.hash.replace(/^#/,""),n=R.a.parse(e);if(n.code){var t=JSON.parse(C.a.decompressFromEncodedURIComponent(n.code)).code;if(t&&t.length>0)return void r(t)}!function(){var e;v.a.async((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,v.a.awrap(s.getItem("code"));case 2:if(!((e=n.sent)&&e.length>0)){n.next=8;break}return r(e),n.abrupt("return");case 8:r(l);case 9:case"end":return n.stop()}}))}()}),[]),{code:t,updateCode:c}}(),t=n.code,r=function(e,n,t){var r=a.a.useState(),o=T()(r,2),i=o[0],s=o[1],l=a.a.useState(!0),c=T()(l,2),d=c[0],u=c[1];return a.a.useEffect((function(){var r=G(document.getElementById("monacoContainer"),e);return window.addEventListener("keydown",(function(e){if("KeyS"===e.code&&(navigator.platform.match("Mac")?e.metaKey:e.ctrlKey)){e.preventDefault();var a=r.getValue(),o=r.getPosition(),i=t(a,o),s=i.formattedCode,l=i.formattedCursor;r.setValue(s),r.setPosition(l),n(s)}})),r.onDidChangeModelContent(O()((function(e){var t=r.getValue();n(t)}),200)),s(r),function(){r.dispose()}}),[]),a.a.useEffect((function(){i&&i.setValue(e)}),[i]),{editor:i,dock:function(){u(!0)},undock:function(){u(!1)},isDocked:d}}(t,n.updateCode,N.a),o=(r.editor,r.dock,r.undock),i=(r.isDocked,function(){var e=a.a.useRef(),n=a.a.useState(200),t=T()(n,2),r=t[0],o=t[1],i=Object(D.a)().store,s=a.a.useCallback(O()((function(n,t,r,a){var s=0;o((function(e){return s=e+a.height})),e.current&&(e.current.updateSize({height:s,width:"100vw"}),i.setItem("editorSize",s))}),500),[]);return a.a.useEffect((function(){var n;v.a.async((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,v.a.awrap(i.getItem("editorSize"));case 2:(n=t.sent)&&(e.current&&e.current.updateSize({height:n,width:"100vw"}),o(n));case 4:case"end":return t.stop()}}))}),[]),{ref:e,defaultSize:{height:"".concat(r),width:"100vw"},height:r,onResize:s,enable:j}}()),l=i.height,u=c()(i,["height"]);return a.a.createElement("div",{className:y.a.root},a.a.createElement("div",{className:y.a.previewContainer,style:{bottom:l}},a.a.createElement(H,{code:t,frames:e})),a.a.createElement(d.Resizable,s()({className:y.a.editorContainer,style:{position:"fixed"}},u,{ref:u.ref}),a.a.createElement("div",{className:y.a.toolbar},a.a.createElement(L,{title:"Undock editor",className:y.a.toolbarIcon,onClick:o})),a.a.createElement("div",{id:"monacoContainer",className:y.a.monacoEditor,style:{height:l}})))}),null),z)},135:function(e,n,t){"use strict";t.d(n,"a",(function(){return p}));var r=t(122),a=t.n(r),o=t(143),i=t.n(o),s=t(211),l=t.n(s);function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}var d=window.__playroomConfig__={port:9e3,openBrowser:!0,storageKey:"playroom__branch:serverless",cwd:"/Users/nikhilsaraf/workspace/qwerty/qwerty_web/packages/react-box",components:"./index.tsx",outputPath:"./public",title:"Qwerty",themes:"./theme.ts",frameComponent:"./playroom/Frame.tsx",widths:[1024,768,320],exampleCode:"\n    <Box>\n      Hello World!\n    </Box>\n  ",typeScriptFiles:["**/*.{ts,tsx}","!**/node_modules"]},u={},m=l.a.createInstance({name:d.storageKey,version:1});function p(){var e=d.components,n=d.outputPath,t=d.title,r=d.themes,o=d.frameComponent,s=d.widths,l=void 0===s?[320,375,768,1024]:s,p=d.port,T=d.openBrowser,b=d.exampleCode,f=i()(d,["components","outputPath","title","themes","frameComponent","widths","port","openBrowser","exampleCode"]);return function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(t,!0).forEach((function(n){a()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(t).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({components:e,outputPath:n,title:t,themes:r,frameComponent:o,widths:l,port:p,openBrowser:T,exampleCode:b,store:m,staticTypes:u},f)}window.__playroomStore__=m},142:function(e,n,t){"use strict";t.d(n,"b",(function(){return u})),t.d(n,"a",(function(){return m}));var r=t(226),a=t.n(r),o=t(227),i=t.n(o),s=t(157),l=function(e,n){try{return a.a.formatWithCursor(e,{cursorOffset:n,parser:"babel",plugins:[i.a]})}catch(e){return null}},c=function(e,n){var t=n.lineNumber;n.column;return e.split("\n").reduce((function(e,n,r){return r<t-1?e+n.length+1:r===t-1?e+t:e}),0)},d=function(e,n){var t=e.slice(0,n-1);return{lineNumber:t.split("\n").length,column:n-t.lastIndexOf("\n")-1}},u=function(e){return"<>\n".concat(e,"\n</>")};function m(e,n){var t=Object(s.a)(e),r=t.jsx,a=t.nonJsx,o=(t.returnStatement,T(r,n)),i=o.formattedCode,l=o.formattedCursor;if(0===a.length)return{formattedCode:i,formattedCursor:l};var c=p(a,n).formattedCode;return{formattedCode:"".concat(c,"\n").concat(i),formattedCursor:l}}var p=function(e,n){var t=l(e,c(e,n)),r=t.formatted,a=t.cursorOffset;return{formattedCode:r,formattedCursor:d(r,a)}},T=function(e,n){var t=n.lineNumber,r=n.column,a=u(e),o=c(a,{lineNumber:t+1,column:r}),i=l(a,o),s=i.formatted,m=i.cursorOffset,p=function(e){return e.replace(/\n {2}/g,"\n").slice(3,-5)}(s),T=d(s,m);return{formattedCode:p,formattedCursor:{lineNumber:T.lineNumber-1,column:T.column-3}}}},157:function(e,n,t){"use strict";function r(e){var n=e.trim()||"";if(0===n.length||0===n.search(/<[>A-Za-z]/))return{jsx:n,nonJsx:"",returnStatement:!1};if(n.search("return")<0){var t=n.search(/<[>A-Za-z]/),r=n.substring(0,t-1).trim();return{jsx:n.substring(t).replace(/^\(+/g,"").replace(/[\);]+$/g,"").trim(),nonJsx:r,returnStatement:!1}}var a=n.search("return "),o=n.substring(0,a-1).trim();return{jsx:n.substring(a).replace(/^return/,"").trim().replace(/^\(+/g,"").replace(/[\);]+$/g,"").trim(),nonJsx:o,returnStatement:!0}}t.d(n,"a",(function(){return r}))},166:function(e,n,t){var r=t(339);"string"==typeof r&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};t(27)(r,a);r.locals&&(e.exports=r.locals)},167:function(e,n,t){var r=t(340);"string"==typeof r&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};t(27)(r,a);r.locals&&(e.exports=r.locals)},193:function(e,n,t){"use strict";t.d(n,"a",(function(){return p}));var r=t(87),a=t.n(r),o=t(13),i=t.n(o),s=t(225),l=t.n(s),c=t(135),d=t(275),u=t(251),m=t(252).default;function p(){var e=Object(c.a)(),n=i.a.useState(d),t=a()(n,2),r=t[0],o=(t[1],i.a.useState(u)),s=a()(o,2),p=s[0],T=(s[1],l()(e.widths,(function(e){return Object.keys(r).map((function(n){return{theme:n,width:e}}))})));return i.a.useEffect((function(){0}),[]),{themes:r,components:p,frameComponent:m,frames:T,config:e}}},251:function(e,n,t){"use strict";t.r(n),t.d(n,"withThemedMotion",(function(){return D})),t.d(n,"Box",(function(){return w})),t.d(n,"Flex",(function(){return F})),t.d(n,"Column",(function(){return k})),t.d(n,"Row",(function(){return V})),t.d(n,"Grid",(function(){return O})),t.d(n,"Cell",(function(){return G})),t.d(n,"Span",(function(){return I})),t.d(n,"Image",(function(){return j})),t.d(n,"Button",(function(){return N})),t.d(n,"Text",(function(){return z})),t.d(n,"Link",(function(){return U})),t.d(n,"Input",(function(){return _})),t.d(n,"SVG",(function(){return W})),t.d(n,"useTheme",(function(){return K}));var r=t(223),a=t.n(r),o=t(186),i=t.n(o),s=t(224),l=t.n(s),c=t(133),d=t.n(c),u=t(155),m=t.n(u),p=t(70);t.d(n,"ThemeProvider",(function(){return p.b}));var T=t(228),b=t(91),f=t(148),g=t.n(f),h=t(44),H=t(13),M=t.n(H);function y(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function L(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?y(t,!0).forEach((function(n){d()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):y(t).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var E=function(e){return e.reduce((function(e,n){var t=m()(n,2),r=t[0],a=t[1];return L({},e,d()({},r,a))}),{})},v=Object(h.l)({transform:!0,transformBox:!0,transformOrigin:!0,transformStyle:!0,translate:!0,scale:!0,rotate:!0,perspective:!0,perspectiveOrigin:!0,overflow:!0,boxSizing:!0,cursor:!0,textDecoration:!0}),P=function(e){return"number"==typeof e?"repeat(".concat(e,", 1fr)"):e},R=Object(h.l)({flow:{property:"gridAutoFlow"},minRowHeight:{property:"gridAutoRows",transform:function(e){var n;return"minmax(".concat(null!==(n=e)&&void 0!==n?n:"20px",", auto)")}},areas:{property:"gridTemplateAreas",transform:function(e){return e}},columns:{property:"gridTemplateColumns",transform:function(e){return P(e)}},rows:{property:"gridTemplateRows",transform:function(e){return P(e)}}}),S=Object(h.l)({colSpan:{property:"gridColumnEnd",transform:function(e){var n;return"".concat(void 0!==e?"span ".concat(null!==(n=e)&&void 0!==n?n:1):"")}},rowSpan:{property:"gridRowEnd",transform:function(e){var n;return"".concat(void 0!==e?"span ".concat(null!==(n=e)&&void 0!==n?n:1):"")}},colIndex:{property:"gridColumnStart",transform:function(e){return"".concat(void 0!==e?"number"==typeof e?e+1:e:"")}},rowIndex:{property:"gridRowStart",transform:function(e){return"".concat(void 0!==e?"number"==typeof e?e+1:e:"")}}}),C=Object(h.n)({prop:"textVariant",variants:{none:{},body:{fontSize:1,fontWeight:"normal"},h1:{as:"h1",fontWeight:"bolder",fontSize:6},h2:{as:"h2",fontWeight:"bolder",fontSize:5},h3:{as:"h3",fontWeight:"bolder",fontSize:4},h4:{as:"h4",fontWeight:"bold",fontSize:3},h5:{as:"h5",fontWeight:"bold",fontSize:2},h6:{as:"h6",fontWeight:"bold",fontSize:1},subhead:{fontWeight:800,letterSpacing:"1px",textTransform:"uppercase",fontSize:3}}}),x=function(e,n){return void 0===e||"string"==typeof e||Array.isArray(e)?e:"object"===l()(e)?E(Object.entries(e).map((function(e){var t=m()(e,2),r=t[0],a=t[1];return[r,"string"==typeof a?a.replace(/\{([^}]+)\}/,(function(e,t){return Object(h.f)(n,t)})):a]}))):void 0},A=function(e,n){return void 0===e||"string"==typeof e||Array.isArray(e)?e:E(Object.entries(e).map((function(e){var t=m()(e,2),r=t[0],a=t[1];return[r,x(a,n)]})))};function D(e){return M.a.forwardRef((function(n,t){var r=n.animate,o=n.whileHover,s=n.variants,l=n.skipTheme,c=void 0!==l&&l,d=n.whileTap,u=i()(n,["animate","whileHover","variants","skipTheme","whileTap"]),m=K();return M.a.createElement(e,a()({ref:t,animate:c?r:x(r,m),whileHover:c?o:x(o,m),whileTap:c?d:x(d,m),variants:c?s:A(s,m)},u))}))}var w=Object(p.c)(D(b.a.div)).attrs((function(e){var n,t,r,a,o,i,s,l;return{height:e.fullHeight?"100%":e.height,width:e.fullWidth?"100%":e.width,colIndex:null!==(n=null===(t=e.gridPosition)||void 0===t?void 0:t.column)&&void 0!==n?n:e.colIndex,rowIndex:null!==(r=null===(a=e.gridPosition)||void 0===a?void 0:a.row)&&void 0!==r?r:e.rowIndex,rowSpan:null!==(o=null===(i=e.gridPosition)||void 0===i?void 0:i.rowSpan)&&void 0!==o?o:e.rowSpan,colSpan:null!==(s=null===(l=e.gridPosition)||void 0===l?void 0:l.colSpan)&&void 0!==s?s:e.colSpan}})).withConfig({displayName:"react-box__Box",componentId:"sc-1d2pfjz-0"})([""," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ",""],h.k,h.c,h.d,h.h,h.b,h.j,h.e,h.g,h.a,h.b,h.i,v,h.m,S,R,C);w.defaultProps={boxSizing:"border-box",fontSize:1},n.default=w;var F=Object(p.c)(w).withConfig({displayName:"react-box__Flex",componentId:"sc-1d2pfjz-1"})(["display:flex;"]),k=Object(p.c)(F).withConfig({displayName:"react-box__Column",componentId:"sc-1d2pfjz-2"})(["flex-direction:column;"]),V=Object(p.c)(F).withConfig({displayName:"react-box__Row",componentId:"sc-1d2pfjz-3"})(["flex-direction:row;"]),O=Object(p.c)(w).withConfig({displayName:"react-box__Grid",componentId:"sc-1d2pfjz-4"})(["display:grid;"]);O.defaultProps={columns:12,flow:"row",gridGap:2,minRowHeight:"20px"};var G=Object(p.c)(w).withConfig({displayName:"react-box__Cell",componentId:"sc-1d2pfjz-5"})([""]),I=w.withComponent(D(b.a.span)),j=w.withComponent(D(b.a.img)),N=w.withComponent(D(b.a.button));N.defaultProps={cursor:"pointer"};var z=Object(p.c)(w.withComponent(D(b.a.p))).attrs((function(e){return{textAlign:e.center?"center":"inherit",textVariant:e.variant}})).withConfig({displayName:"react-box__Text",componentId:"sc-1d2pfjz-6"})([""]);z.defaultProps={margin:0,display:"inline-block",variant:"none"};var U=w.withComponent(D(b.a.a));U.defaultProps={display:"inline-block",textDecoration:"none",cursor:"pointer"};var _=w.withComponent(D(b.a.input));_.defaultProps={display:"inline-block",verticalAlign:"middle",type:"text"};var B=w.withComponent(D(b.a.svg));function W(e){var n=e.src,t=void 0===n?"":n,r=e.children,a=void 0===r?void 0:r,o=i()(e,["src","children"]);return t&&t.length>0?M.a.createElement(T.a,{style:L({stroke:"currentColor"},o),src:t}):M.a.createElement(B,o,a)}W.defaultProps={stroke:"currentColor"};var K=function(){var e=M.a.useContext(p.a);return Object.assign(e,{get:function(){for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];return h.f.apply(void 0,[e].concat(t))},color:function(n){return g()(Object(h.f)(e,"colors.".concat(n)))}})}},252:function(e,n,t){"use strict";t.r(n);var r=t(13),a=t.n(r),o=t(70);n.default=function(e){var n=e.theme,t=e.children;return console.log(n),a.a.createElement(o.b,{theme:n},t)}},275:function(e,n,t){"use strict";t.r(n);var r=t(133),a=t.n(r),o={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121"},i={red:{50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",a100:"#ff8a80",a200:"#ff5252",a400:"#ff1744",a700:"#d50000"},pink:{50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",a100:"#ff80ab",a200:"#ff4081",a400:"#f50057",a700:"#c51162"},purple:{50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",a100:"#ea80fc",a200:"#e040fb",a400:"#d500f9",a700:"#aa00ff"},deepPurple:{50:"#ede7f6",100:"#d1c4e9",200:"#b39ddb",300:"#9575cd",400:"#7e57c2",500:"#673ab7",600:"#5e35b1",700:"#512da8",800:"#4527a0",900:"#311b92",a100:"#b388ff",a200:"#7c4dff",a400:"#651fff",a700:"#6200ea"},indigo:{50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",a100:"#8c9eff",a200:"#536dfe",a400:"#3d5afe",a700:"#304ffe"},blue:{50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",a100:"#82b1ff",a200:"#448aff",a400:"#2979ff",a700:"#2962ff"},lightBlue:{50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",a100:"#80d8ff",a200:"#40c4ff",a400:"#00b0ff",a700:"#0091ea"},cyan:{50:"#e0f7fa",100:"#b2ebf2",200:"#80deea",300:"#4dd0e1",400:"#26c6da",500:"#00bcd4",600:"#00acc1",700:"#0097a7",800:"#00838f",900:"#006064",a100:"#84ffff",a200:"#18ffff",a400:"#00e5ff",a700:"#00b8d4"},teal:{50:"#e0f2f1",100:"#b2dfdb",200:"#80cbc4",300:"#4db6ac",400:"#26a69a",500:"#009688",600:"#00897b",700:"#00796b",800:"#00695c",900:"#004d40",a100:"#a7ffeb",a200:"#64ffda",a400:"#1de9b6",a700:"#00bfa5"},green:{50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",a100:"#b9f6ca",a200:"#69f0ae",a400:"#00e676",a700:"#00c853"},lightGreen:{50:"#f1f8e9",100:"#dcedc8",200:"#c5e1a5",300:"#aed581",400:"#9ccc65",500:"#8bc34a",600:"#7cb342",700:"#689f38",800:"#558b2f",900:"#33691e",a100:"#ccff90",a200:"#b2ff59",a400:"#76ff03",a700:"#64dd17"},lime:{50:"#f9fbe7",100:"#f0f4c3",200:"#e6ee9c",300:"#dce775",400:"#d4e157",500:"#cddc39",600:"#c0ca33",700:"#afb42b",800:"#9e9d24",900:"#827717",a100:"#f4ff81",a200:"#eeff41",a400:"#c6ff00",a700:"#aeea00"},yellow:{50:"#fffde7",100:"#fff9c4",200:"#fff59d",300:"#fff176",400:"#ffee58",500:"#ffeb3b",600:"#fdd835",700:"#fbc02d",800:"#f9a825",900:"#f57f17",a100:"#ffff8d",a200:"#ffff00",a400:"#ffea00",a700:"#ffd600"},amber:{50:"#fff8e1",100:"#ffecb3",200:"#ffe082",300:"#ffd54f",400:"#ffca28",500:"#ffc107",600:"#ffb300",700:"#ffa000",800:"#ff8f00",900:"#ff6f00",a100:"#ffe57f",a200:"#ffd740",a400:"#ffc400",a700:"#ffab00"},orange:{50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",a100:"#ffd180",a200:"#ffab40",a400:"#ff9100",a700:"#ff6d00"},deepOrange:{50:"#fbe9e7",100:"#ffccbc",200:"#ffab91",300:"#ff8a65",400:"#ff7043",500:"#ff5722",600:"#f4511e",700:"#e64a19",800:"#d84315",900:"#bf360c",a100:"#ff9e80",a200:"#ff6e40",a400:"#ff3d00",a700:"#dd2c00"},brown:{50:"#efebe9",100:"#d7ccc8",200:"#bcaaa4",300:"#a1887f",400:"#8d6e63",500:"#795548",600:"#6d4c41",700:"#5d4037",800:"#4e342e",900:"#3e2723"},grey:o,blueGrey:{50:"#eceff1",100:"#cfd8dc",200:"#b0bec5",300:"#90a4ae",400:"#78909c",500:"#607d8b",600:"#546e7a",700:"#455a64",800:"#37474f",900:"#263238"},black:o[900],white:"#ffffff",darkText:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",dividers:"rgba(0, 0, 0, 0.12)"},lightText:{primary:"rgba(255, 255, 255, 1)",secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",dividers:"rgba(255, 255, 255, 0.12)"},darkIcons:{active:"rgba(0, 0, 0, 0.54)",inactive:"rgba(0, 0, 0, 0.38)"},lightIcons:{active:"rgba(255, 255, 255, 1)",inactive:"rgba(255, 255, 255, 0.5)"}},s=t(148),l=t.n(s);function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(t,!0).forEach((function(n){a()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(t).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}t.d(n,"theme",(function(){return p}));var u=i.blueGrey;function m(e){return e.map((function(e){return e.includes(" ")?'"'.concat(e,'"'):e})).join(", ")}var p=d({breakpoints:["544px","768px","1012px","1280px"],colors:d({},i,{},{background:i.white,text:u[900],hue:u,darkText:u[900],lightText:i.white,pageDivider:i.red[200],pageRule:l()(i.blue[200]).lighten(.25).hex(),form:{active:u[800],inactive:u[200],disabled:u[100],activeText:i.white,inactiveText:u[900],disabledText:u[300]},primary:u[800],light:u[50],accent:u[300]}),fontSizes:[12,14,16,20,24,32,40,48],lineHeights:{condensedUltra:1,condensed:1.25,default:1.5},maxWidths:{small:"544px",medium:"768px",large:"1012px",xlarge:"1280px"},fonts:{normal:m(["Barlow","-apple-system","BlinkMacSystemFont","Segoe UI","Helvetica","Arial","sans-serif","Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"]),mono:m(["SFMono-Regular","Consolas","Liberation Mono","Menlo","Courier","monospace"])},fontWeights:{lighter:300,normal:400,bold:500,bolder:600},borders:[0,"1px solid"],radii:[0,3,6,12,150],space:[0,4,8,16,24,32,40,48,64,80,96,112,128],sizes:[0,4,8,16,24,32,40,48,64,80,96,112,128]},{shadows:{none:"rgba(0,0,0,0) 0 0px 0px 0",small:"rgba(0,0,0,0.15) 0 3px 6px 0",large:"rgba(0,0,0,0.30) 0 4px 10px 0"},ruleHeight:32});n.default=p},327:function(e,n,t){e.exports=t(1008)},339:function(e,n,t){(n=e.exports=t(26)(!1)).push([e.i,"._3_taaUcQJaXa9xIZedk5u7 {\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  overflow-x: auto;\n  overflow-y: hidden;\n  white-space: nowrap;\n  padding: 40px 0;\n}\n._3qm_Fnzck0I-tGkfo3qaT_ {\n  display: inline-block;\n  position: relative;\n  height: 97%;\n  margin-right: 40px;\n  background: white;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n  transition: all 0.3s ease;\n}\n._3qm_Fnzck0I-tGkfo3qaT_:first-child {\n  margin-left: 40px;\n}\n._3qm_Fnzck0I-tGkfo3qaT_:hover {\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\n}\n.QA3S6Hsiehbi4bCuypMer {\n  position: absolute;\n  height: 30px;\n  bottom: -30px;\n  line-height: 30px;\n  left: 0;\n  right: 0;\n  font-family: helvetica;\n  font-size: 14px;\n  opacity: 0.2;\n  transition: all 0.2s ease;\n}\n._3qm_Fnzck0I-tGkfo3qaT_:hover .QA3S6Hsiehbi4bCuypMer {\n  opacity: 0.8;\n}\n.WjjLs6fwX7fivkBfDAu5f {\n  font-weight: bold;\n}\n._1XZoeULxsq8rifJUOJVu9Y {\n  height: 100%;\n  border: 0;\n  background: white;\n}\n",""]),n.locals={root:"_3_taaUcQJaXa9xIZedk5u7",frameContainer:"_3qm_Fnzck0I-tGkfo3qaT_",frameName:"QA3S6Hsiehbi4bCuypMer",strong:"WjjLs6fwX7fivkBfDAu5f",frame:"_1XZoeULxsq8rifJUOJVu9Y"}},340:function(e,n,t){(n=e.exports=t(26)(!1)).push([e.i,"body {\n  margin: 0;\n}\n._3qgZHoOzLlxg7kGocmFnfq {\n  background: #f2f2f2;\n  height: 100vh;\n}\n._2cAMOcbWlRxZKLEj7yolzZ {\n  height: 100%;\n}\n.sYvjMDmbo-c2VYOJl4CLY {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: #f2f2f2;\n}\n._39f4_i0NaxkN2eMi1Kjl6D {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 1;\n  max-height: 95vh;\n}\n._3NHoVH4D9fvx17FmRZE8KY {\n  height: 100vh;\n}\n._16GHcTgwd5LOzmpTzZ6DcM {\n  background-color: rgba(255, 255, 255, 0.8);\n  box-shadow: 0 0 10px rgba(255, 255, 255, 0.8);\n  padding: 12px;\n  display: flex;\n  justify-content: flex-end;\n  position: absolute;\n  top: 0;\n  right: 0;\n  z-index: 3;\n}\n._3kcu6t_PC2sRRVrGQlcNb {\n  width: 24px;\n  height: 24px;\n  cursor: pointer;\n}\n._3kcu6t_PC2sRRVrGQlcNb * {\n  fill: #555;\n}\n._3kcu6t_PC2sRRVrGQlcNb:hover * {\n  fill: #000;\n}\n._1NMGRr5kKkdvILqCUpbBtG {\n  width: 18px;\n}\n._1f0e3qzvXxgpC-f9q90i-R {\n  width: 12px;\n  height: 12px;\n  border-radius: 6px;\n  background-color: blue;\n  position: relative;\n  top: 9px;\n  left: -20px;\n}\n.react-codemirror2 {\n  height: 100%;\n}\n.CodeMirror {\n  height: 100%;\n  padding: 0 16px;\n  font-family: Source Code Pro, Firacode, Hasklig, Menlo, monospace;\n}\n.CodeMirror, .CodeMirror * {\n  box-sizing: border-box;\n}\n.CodeMirror-gutters {\n  display: none;\n}\n.CodeMirror pre, .CodeMirror-linenumber {\n  font-size: 18px;\n  padding: 2px 0;\n  line-height: 26px;\n}\n.CodeMirror-lines {\n  padding: 16px 20px;\n}\n.CodeMirror-linenumber {\n  padding-right: 80px;\n}\n.CodeMirror-hints {\n  position: absolute;\n  z-index: 10;\n  overflow: hidden;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);\n  border-radius: 3px;\n  background: white;\n  font-size: 90%;\n  line-height: 150%;\n  font-family: Source Code Pro, Firacode, Hasklig, Menlo, monospace;\n  max-height: 20em;\n  overflow-y: auto;\n}\n.CodeMirror-hint {\n  margin: 0;\n  padding: 4px 8px;\n  border-radius: 2px;\n  white-space: pre;\n  color: black;\n  cursor: pointer;\n}\nli.CodeMirror-hint-active {\n  background: #08f;\n  color: white;\n}\n.cm-s-neo.CodeMirror {\n  background-color: #fff;\n}\n.cm-s-neo .CodeMirror-cursor {\n  background: black;\n  width: 2px;\n}\n.cm-s-neo .CodeMirror-linenumber {\n  color: white;\n}\n.cm-s-neo .cm-tag {\n  color: #040080;\n}\n.cm-s-neo .cm-attribute {\n  color: #005ad2;\n}\n.cm-s-neo .cm-string {\n  color: #00439c;\n}\n.cm-s-neo .cm-atom {\n  color: #00439c;\n}\n.cm-s-neo .cm-variable {\n  color: #827eff;\n}\n",""]),n.locals={root:"_3qgZHoOzLlxg7kGocmFnfq",monacoEditor:"_2cAMOcbWlRxZKLEj7yolzZ",previewContainer:"sYvjMDmbo-c2VYOJl4CLY",editorContainer:"_39f4_i0NaxkN2eMi1Kjl6D",undockedEditorContainer:"_3NHoVH4D9fvx17FmRZE8KY",toolbar:"_16GHcTgwd5LOzmpTzZ6DcM",toolbarIcon:"_3kcu6t_PC2sRRVrGQlcNb",gutter:"_1NMGRr5kKkdvILqCUpbBtG",marker:"_1f0e3qzvXxgpC-f9q90i-R"}}},[[327,0,1,6]]]);