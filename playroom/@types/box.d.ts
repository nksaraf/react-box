declare interface TransformProps {
    transform?: ResponsiveValue<TransformProperty>;
    transformBox?: true;
    transformOrigin?: true;
    transformStyle?: true;
    translate?: true;
    scale?: true;
    rotate?: true;
    perspective?: true;
    perspectiveOrigin?: true;
    overflow?: ResponsiveValue<OverflowProperty>;
    boxSizing?: ResponsiveValue<BoxSizingProperty>;
    cursor?: ResponsiveValue<CursorProperty>;
    textDecoration?: ResponsiveValue<TextDecorationProperty<any>>;
}
declare interface CustomGridProps {
    flow?: any;
    minRowHeight?: any;
    areas?: any;
    columns?: any;
    rows?: any;
}

declare interface CellProps {
    colIndex?: ResponsiveValue<number | string>;
    rowIndex?: ResponsiveValue<number | string>;
    colSpan?: ResponsiveValue<number | string>;
    rowSpan?: ResponsiveValue<number | string>;
    middle?: ResponsiveValue<boolean>;
    fullHeight?: ResponsiveValue<boolean>;
    fullWidth?: ResponsiveValue<boolean>;
  }
  
declare interface GridPosition {
row?: ResponsiveValue<number>;
column?: ResponsiveValue<number>;
rowSpan?: ResponsiveValue<number>;
colSpan?: ResponsiveValue<number>;
}

declare interface BoxProps extends SpaceProps, ColorProps, DisplayProps, BackgroundProps, LayoutProps, FlexboxProps, GridProps, BorderProps, ShadowProps, PositionProps, TransformProps, TypographyProps, CellProps, CustomGridProps, MotionProps, React.RefAttributes<HTMLDivElement> {
    as?: any;
    gridPosition?: GridPosition;
    textVariant?: string;
    skipTheme?: boolean;
}
declare function withThemedMotion<T extends React.Component, P extends MotionProps = MotionProps>(WrappedComponent: React.ComponentType<P>): React.ForwardRefExoticComponent<React.PropsWithoutRef<P & {
    skipTheme?: boolean | undefined;
}> & React.RefAttributes<T>>;
declare const Box: StyledComponent<React.ForwardRefExoticComponent<Pick<{
    hidden?: boolean | undefined;
    color?: string | undefined;
    title?: string | undefined;
    children?: React.ReactNode;
    className?: string | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    role?: string | undefined;
    tabIndex?: number | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: boolean | "false" | "true" | undefined;
    "aria-autocomplete"?: "none" | "list" | "inline" | "both" | undefined;
    "aria-busy"?: boolean | "false" | "true" | undefined;
    "aria-checked"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "step" | "false" | "true" | "page" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: boolean | "false" | "true" | undefined;
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: boolean | "false" | "true" | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: boolean | "false" | "true" | undefined;
    "aria-haspopup"?: boolean | "grid" | "dialog" | "menu" | "false" | "true" | "listbox" | "tree" | undefined;
    "aria-hidden"?: boolean | "false" | "true" | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: boolean | "false" | "true" | undefined;
    "aria-multiline"?: boolean | "false" | "true" | undefined;
    "aria-multiselectable"?: boolean | "false" | "true" | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-readonly"?: boolean | "false" | "true" | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals" | undefined;
    "aria-required"?: boolean | "false" | "true" | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: boolean | "false" | "true" | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCopyCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCut?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCutCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onPaste?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onPasteCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCompositionEnd?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionStart?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionUpdate?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onFocus?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onFocusCapture?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onBlur?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onBlurCapture?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onChange?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onChangeCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onBeforeInput?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onBeforeInputCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInput?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInputCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onReset?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onResetCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onSubmit?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onSubmitCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInvalid?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInvalidCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onLoad?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onError?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onErrorCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyPress?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyUp?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onAbort?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onAbortCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlay?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onDurationChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEmptied?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEncrypted?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEnded?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEndedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedData?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadStart?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPause?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPauseCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlay?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlayCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlaying?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlayingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onProgress?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onProgressCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onRateChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeeked?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeekedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeeking?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeekingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onStalled?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onStalledCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSuspend?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSuspendCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onTimeUpdate?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onVolumeChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onWaiting?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onWaitingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onAuxClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onAuxClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onContextMenu?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onContextMenuCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onDoubleClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onDoubleClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onDragCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragEndCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragEnter?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragEnterCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragExit?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragExitCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragLeave?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragLeaveCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragOver?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragOverCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragStartCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDrop?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDropCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onMouseDown?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseDownCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseEnter?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseLeave?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseMove?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseMoveCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOut?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOutCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOver?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOverCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseUp?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseUpCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onSelect?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSelectCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onTouchCancel?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchCancelCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchEnd?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchEndCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchMove?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchMoveCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchStart?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchStartCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onPointerDown?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerDownCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerMove?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerMoveCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerUp?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerUpCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerCancel?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerCancelCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerEnter?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerEnterCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerLeave?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerLeaveCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOver?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOverCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOut?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOutCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onGotPointerCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onGotPointerCaptureCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onLostPointerCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onLostPointerCaptureCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onScroll?: ((event: React.UIEvent<HTMLDivElement>) => void) | undefined;
    onScrollCapture?: ((event: React.UIEvent<HTMLDivElement>) => void) | undefined;
    onWheel?: ((event: React.WheelEvent<HTMLDivElement>) => void) | undefined;
    onWheelCapture?: ((event: React.WheelEvent<HTMLDivElement>) => void) | undefined;
    onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationEnd?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationIteration?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onTransitionEnd?: ((event: React.TransitionEvent<HTMLDivElement>) => void) | undefined;
    onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLDivElement>) => void) | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: boolean | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: boolean | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: boolean | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
} & MotionProps & React.RefAttributes<HTMLDivElement> & {
    skipTheme?: boolean | undefined;
}, "inherit" | "initial" | "hidden" | "color" | "transition" | "animate" | "whileHover" | "variants" | "skipTheme" | "whileTap" | "style" | "title" | "key" | "children" | "transformTemplate" | "transformValues" | "exit" | "positionTransition" | "layoutTransition" | "onUpdate" | "onAnimationStart" | "onAnimationComplete" | "onPan" | "onPanStart" | "onPanSessionStart" | "onPanEnd" | "onTap" | "onTapStart" | "onTapCancel" | "onHoverStart" | "onHoverEnd" | "drag" | "dragDirectionLock" | "dragPropagation" | "dragConstraints" | "dragElastic" | "dragMomentum" | "dragTransition" | "_dragValueX" | "_dragValueY" | "_dragTransitionControls" | "dragOriginX" | "dragOriginY" | "onDragStart" | "onDragEnd" | "onDrag" | "onDirectionLock" | "onDragTransitionEnd" | "custom" | "static" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDragCapture" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "placeholder" | "slot" | "spellCheck" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is"> & React.RefAttributes<React.Component<{}, {}, any>>>, any, BoxProps, never>;

declare const Flex: StyledComponent<React.ForwardRefExoticComponent<Pick<{
    hidden?: boolean | undefined;
    color?: string | undefined;
    title?: string | undefined;
    children?: React.ReactNode;
    className?: string | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    role?: string | undefined;
    tabIndex?: number | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: boolean | "false" | "true" | undefined;
    "aria-autocomplete"?: "none" | "list" | "inline" | "both" | undefined;
    "aria-busy"?: boolean | "false" | "true" | undefined;
    "aria-checked"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "step" | "false" | "true" | "page" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: boolean | "false" | "true" | undefined;
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: boolean | "false" | "true" | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: boolean | "false" | "true" | undefined;
    "aria-haspopup"?: boolean | "grid" | "dialog" | "menu" | "false" | "true" | "listbox" | "tree" | undefined;
    "aria-hidden"?: boolean | "false" | "true" | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: boolean | "false" | "true" | undefined;
    "aria-multiline"?: boolean | "false" | "true" | undefined;
    "aria-multiselectable"?: boolean | "false" | "true" | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-readonly"?: boolean | "false" | "true" | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals" | undefined;
    "aria-required"?: boolean | "false" | "true" | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: boolean | "false" | "true" | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCopyCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCut?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCutCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onPaste?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onPasteCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCompositionEnd?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionStart?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionUpdate?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onFocus?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onFocusCapture?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onBlur?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onBlurCapture?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onChange?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onChangeCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onBeforeInput?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onBeforeInputCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInput?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInputCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onReset?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onResetCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onSubmit?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onSubmitCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInvalid?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInvalidCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onLoad?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onError?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onErrorCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyPress?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyUp?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onAbort?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onAbortCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlay?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onDurationChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEmptied?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEncrypted?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEnded?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEndedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedData?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadStart?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPause?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPauseCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlay?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlayCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlaying?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlayingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onProgress?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onProgressCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onRateChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeeked?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeekedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeeking?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeekingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onStalled?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onStalledCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSuspend?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSuspendCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onTimeUpdate?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onVolumeChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onWaiting?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onWaitingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onAuxClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onAuxClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onContextMenu?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onContextMenuCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onDoubleClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onDoubleClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onDragCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragEndCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragEnter?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragEnterCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragExit?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragExitCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragLeave?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragLeaveCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragOver?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragOverCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragStartCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDrop?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDropCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onMouseDown?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseDownCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseEnter?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseLeave?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseMove?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseMoveCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOut?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOutCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOver?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOverCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseUp?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseUpCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onSelect?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSelectCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onTouchCancel?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchCancelCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchEnd?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchEndCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchMove?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchMoveCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchStart?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchStartCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onPointerDown?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerDownCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerMove?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerMoveCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerUp?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerUpCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerCancel?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerCancelCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerEnter?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerEnterCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerLeave?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerLeaveCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOver?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOverCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOut?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOutCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onGotPointerCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onGotPointerCaptureCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onLostPointerCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onLostPointerCaptureCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onScroll?: ((event: React.UIEvent<HTMLDivElement>) => void) | undefined;
    onScrollCapture?: ((event: React.UIEvent<HTMLDivElement>) => void) | undefined;
    onWheel?: ((event: React.WheelEvent<HTMLDivElement>) => void) | undefined;
    onWheelCapture?: ((event: React.WheelEvent<HTMLDivElement>) => void) | undefined;
    onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationEnd?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationIteration?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onTransitionEnd?: ((event: React.TransitionEvent<HTMLDivElement>) => void) | undefined;
    onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLDivElement>) => void) | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: boolean | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: boolean | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: boolean | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
} & MotionProps & React.RefAttributes<HTMLDivElement> & {
    skipTheme?: boolean | undefined;
}, "inherit" | "initial" | "hidden" | "color" | "transition" | "animate" | "whileHover" | "variants" | "skipTheme" | "whileTap" | "style" | "title" | "key" | "children" | "transformTemplate" | "transformValues" | "exit" | "positionTransition" | "layoutTransition" | "onUpdate" | "onAnimationStart" | "onAnimationComplete" | "onPan" | "onPanStart" | "onPanSessionStart" | "onPanEnd" | "onTap" | "onTapStart" | "onTapCancel" | "onHoverStart" | "onHoverEnd" | "drag" | "dragDirectionLock" | "dragPropagation" | "dragConstraints" | "dragElastic" | "dragMomentum" | "dragTransition" | "_dragValueX" | "_dragValueY" | "_dragTransitionControls" | "dragOriginX" | "dragOriginY" | "onDragStart" | "onDragEnd" | "onDrag" | "onDirectionLock" | "onDragTransitionEnd" | "custom" | "static" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDragCapture" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "placeholder" | "slot" | "spellCheck" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is"> & React.RefAttributes<React.Component<{}, {}, any>>>, any, BoxProps, never>;
declare const Column: StyledComponent<React.ForwardRefExoticComponent<Pick<{
    hidden?: boolean | undefined;
    color?: string | undefined;
    title?: string | undefined;
    children?: React.ReactNode;
    className?: string | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    role?: string | undefined;
    tabIndex?: number | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: boolean | "false" | "true" | undefined;
    "aria-autocomplete"?: "none" | "list" | "inline" | "both" | undefined;
    "aria-busy"?: boolean | "false" | "true" | undefined;
    "aria-checked"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "step" | "false" | "true" | "page" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: boolean | "false" | "true" | undefined;
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: boolean | "false" | "true" | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: boolean | "false" | "true" | undefined;
    "aria-haspopup"?: boolean | "grid" | "dialog" | "menu" | "false" | "true" | "listbox" | "tree" | undefined;
    "aria-hidden"?: boolean | "false" | "true" | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: boolean | "false" | "true" | undefined;
    "aria-multiline"?: boolean | "false" | "true" | undefined;
    "aria-multiselectable"?: boolean | "false" | "true" | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-readonly"?: boolean | "false" | "true" | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals" | undefined;
    "aria-required"?: boolean | "false" | "true" | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: boolean | "false" | "true" | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCopyCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCut?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCutCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onPaste?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onPasteCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCompositionEnd?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionStart?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionUpdate?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onFocus?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onFocusCapture?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onBlur?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onBlurCapture?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onChange?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onChangeCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onBeforeInput?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onBeforeInputCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInput?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInputCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onReset?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onResetCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onSubmit?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onSubmitCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInvalid?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInvalidCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onLoad?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onError?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onErrorCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyPress?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyUp?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onAbort?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onAbortCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlay?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onDurationChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEmptied?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEncrypted?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEnded?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEndedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedData?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadStart?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPause?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPauseCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlay?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlayCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlaying?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlayingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onProgress?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onProgressCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onRateChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeeked?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeekedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeeking?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeekingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onStalled?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onStalledCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSuspend?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSuspendCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onTimeUpdate?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onVolumeChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onWaiting?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onWaitingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onAuxClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onAuxClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onContextMenu?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onContextMenuCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onDoubleClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onDoubleClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onDragCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragEndCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragEnter?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragEnterCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragExit?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragExitCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragLeave?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragLeaveCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragOver?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragOverCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragStartCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDrop?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDropCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onMouseDown?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseDownCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseEnter?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseLeave?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseMove?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseMoveCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOut?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOutCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOver?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOverCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseUp?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseUpCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onSelect?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSelectCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onTouchCancel?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchCancelCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchEnd?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchEndCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchMove?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchMoveCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchStart?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchStartCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onPointerDown?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerDownCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerMove?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerMoveCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerUp?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerUpCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerCancel?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerCancelCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerEnter?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerEnterCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerLeave?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerLeaveCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOver?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOverCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOut?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOutCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onGotPointerCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onGotPointerCaptureCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onLostPointerCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onLostPointerCaptureCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onScroll?: ((event: React.UIEvent<HTMLDivElement>) => void) | undefined;
    onScrollCapture?: ((event: React.UIEvent<HTMLDivElement>) => void) | undefined;
    onWheel?: ((event: React.WheelEvent<HTMLDivElement>) => void) | undefined;
    onWheelCapture?: ((event: React.WheelEvent<HTMLDivElement>) => void) | undefined;
    onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationEnd?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationIteration?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onTransitionEnd?: ((event: React.TransitionEvent<HTMLDivElement>) => void) | undefined;
    onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLDivElement>) => void) | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: boolean | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: boolean | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: boolean | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
} & MotionProps & React.RefAttributes<HTMLDivElement> & {
    skipTheme?: boolean | undefined;
}, "inherit" | "initial" | "hidden" | "color" | "transition" | "animate" | "whileHover" | "variants" | "skipTheme" | "whileTap" | "style" | "title" | "key" | "children" | "transformTemplate" | "transformValues" | "exit" | "positionTransition" | "layoutTransition" | "onUpdate" | "onAnimationStart" | "onAnimationComplete" | "onPan" | "onPanStart" | "onPanSessionStart" | "onPanEnd" | "onTap" | "onTapStart" | "onTapCancel" | "onHoverStart" | "onHoverEnd" | "drag" | "dragDirectionLock" | "dragPropagation" | "dragConstraints" | "dragElastic" | "dragMomentum" | "dragTransition" | "_dragValueX" | "_dragValueY" | "_dragTransitionControls" | "dragOriginX" | "dragOriginY" | "onDragStart" | "onDragEnd" | "onDrag" | "onDirectionLock" | "onDragTransitionEnd" | "custom" | "static" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDragCapture" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "placeholder" | "slot" | "spellCheck" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is"> & React.RefAttributes<React.Component<{}, {}, any>>>, any, BoxProps, never>;
declare const Row: StyledComponent<React.ForwardRefExoticComponent<Pick<{
    hidden?: boolean | undefined;
    color?: string | undefined;
    title?: string | undefined;
    children?: React.ReactNode;
    className?: string | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    role?: string | undefined;
    tabIndex?: number | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: boolean | "false" | "true" | undefined;
    "aria-autocomplete"?: "none" | "list" | "inline" | "both" | undefined;
    "aria-busy"?: boolean | "false" | "true" | undefined;
    "aria-checked"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "step" | "false" | "true" | "page" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: boolean | "false" | "true" | undefined;
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: boolean | "false" | "true" | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: boolean | "false" | "true" | undefined;
    "aria-haspopup"?: boolean | "grid" | "dialog" | "menu" | "false" | "true" | "listbox" | "tree" | undefined;
    "aria-hidden"?: boolean | "false" | "true" | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: boolean | "false" | "true" | undefined;
    "aria-multiline"?: boolean | "false" | "true" | undefined;
    "aria-multiselectable"?: boolean | "false" | "true" | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-readonly"?: boolean | "false" | "true" | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals" | undefined;
    "aria-required"?: boolean | "false" | "true" | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: boolean | "false" | "true" | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCopyCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCut?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCutCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onPaste?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onPasteCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCompositionEnd?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionStart?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionUpdate?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onFocus?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onFocusCapture?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onBlur?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onBlurCapture?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onChange?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onChangeCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onBeforeInput?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onBeforeInputCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInput?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInputCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onReset?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onResetCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onSubmit?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onSubmitCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInvalid?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInvalidCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onLoad?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onError?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onErrorCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyPress?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyUp?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onAbort?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onAbortCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlay?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onDurationChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEmptied?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEncrypted?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEnded?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEndedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedData?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadStart?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPause?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPauseCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlay?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlayCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlaying?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlayingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onProgress?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onProgressCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onRateChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeeked?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeekedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeeking?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeekingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onStalled?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onStalledCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSuspend?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSuspendCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onTimeUpdate?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onVolumeChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onWaiting?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onWaitingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onAuxClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onAuxClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onContextMenu?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onContextMenuCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onDoubleClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onDoubleClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onDragCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragEndCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragEnter?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragEnterCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragExit?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragExitCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragLeave?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragLeaveCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragOver?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragOverCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragStartCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDrop?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDropCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onMouseDown?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseDownCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseEnter?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseLeave?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseMove?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseMoveCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOut?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOutCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOver?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOverCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseUp?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseUpCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onSelect?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSelectCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onTouchCancel?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchCancelCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchEnd?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchEndCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchMove?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchMoveCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchStart?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchStartCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onPointerDown?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerDownCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerMove?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerMoveCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerUp?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerUpCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerCancel?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerCancelCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerEnter?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerEnterCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerLeave?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerLeaveCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOver?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOverCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOut?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOutCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onGotPointerCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onGotPointerCaptureCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onLostPointerCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onLostPointerCaptureCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onScroll?: ((event: React.UIEvent<HTMLDivElement>) => void) | undefined;
    onScrollCapture?: ((event: React.UIEvent<HTMLDivElement>) => void) | undefined;
    onWheel?: ((event: React.WheelEvent<HTMLDivElement>) => void) | undefined;
    onWheelCapture?: ((event: React.WheelEvent<HTMLDivElement>) => void) | undefined;
    onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationEnd?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationIteration?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onTransitionEnd?: ((event: React.TransitionEvent<HTMLDivElement>) => void) | undefined;
    onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLDivElement>) => void) | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: boolean | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: boolean | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: boolean | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
} & MotionProps & React.RefAttributes<HTMLDivElement> & {
    skipTheme?: boolean | undefined;
}, "inherit" | "initial" | "hidden" | "color" | "transition" | "animate" | "whileHover" | "variants" | "skipTheme" | "whileTap" | "style" | "title" | "key" | "children" | "transformTemplate" | "transformValues" | "exit" | "positionTransition" | "layoutTransition" | "onUpdate" | "onAnimationStart" | "onAnimationComplete" | "onPan" | "onPanStart" | "onPanSessionStart" | "onPanEnd" | "onTap" | "onTapStart" | "onTapCancel" | "onHoverStart" | "onHoverEnd" | "drag" | "dragDirectionLock" | "dragPropagation" | "dragConstraints" | "dragElastic" | "dragMomentum" | "dragTransition" | "_dragValueX" | "_dragValueY" | "_dragTransitionControls" | "dragOriginX" | "dragOriginY" | "onDragStart" | "onDragEnd" | "onDrag" | "onDirectionLock" | "onDragTransitionEnd" | "custom" | "static" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDragCapture" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "placeholder" | "slot" | "spellCheck" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is"> & React.RefAttributes<React.Component<{}, {}, any>>>, any, BoxProps, never>;
declare const Grid: StyledComponent<React.ForwardRefExoticComponent<Pick<{
    hidden?: boolean | undefined;
    color?: string | undefined;
    title?: string | undefined;
    children?: React.ReactNode;
    className?: string | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    role?: string | undefined;
    tabIndex?: number | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: boolean | "false" | "true" | undefined;
    "aria-autocomplete"?: "none" | "list" | "inline" | "both" | undefined;
    "aria-busy"?: boolean | "false" | "true" | undefined;
    "aria-checked"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "step" | "false" | "true" | "page" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: boolean | "false" | "true" | undefined;
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: boolean | "false" | "true" | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: boolean | "false" | "true" | undefined;
    "aria-haspopup"?: boolean | "grid" | "dialog" | "menu" | "false" | "true" | "listbox" | "tree" | undefined;
    "aria-hidden"?: boolean | "false" | "true" | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: boolean | "false" | "true" | undefined;
    "aria-multiline"?: boolean | "false" | "true" | undefined;
    "aria-multiselectable"?: boolean | "false" | "true" | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-readonly"?: boolean | "false" | "true" | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals" | undefined;
    "aria-required"?: boolean | "false" | "true" | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: boolean | "false" | "true" | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCopyCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCut?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCutCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onPaste?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onPasteCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCompositionEnd?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionStart?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionUpdate?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onFocus?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onFocusCapture?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onBlur?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onBlurCapture?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onChange?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onChangeCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onBeforeInput?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onBeforeInputCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInput?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInputCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onReset?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onResetCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onSubmit?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onSubmitCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInvalid?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInvalidCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onLoad?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onError?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onErrorCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyPress?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyUp?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onAbort?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onAbortCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlay?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onDurationChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEmptied?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEncrypted?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEnded?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEndedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedData?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadStart?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPause?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPauseCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlay?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlayCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlaying?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlayingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onProgress?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onProgressCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onRateChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeeked?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeekedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeeking?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeekingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onStalled?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onStalledCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSuspend?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSuspendCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onTimeUpdate?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onVolumeChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onWaiting?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onWaitingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onAuxClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onAuxClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onContextMenu?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onContextMenuCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onDoubleClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onDoubleClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onDragCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragEndCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragEnter?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragEnterCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragExit?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragExitCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragLeave?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragLeaveCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragOver?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragOverCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragStartCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDrop?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDropCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onMouseDown?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseDownCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseEnter?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseLeave?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseMove?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseMoveCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOut?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOutCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOver?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOverCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseUp?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseUpCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onSelect?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSelectCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onTouchCancel?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchCancelCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchEnd?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchEndCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchMove?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchMoveCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchStart?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchStartCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onPointerDown?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerDownCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerMove?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerMoveCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerUp?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerUpCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerCancel?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerCancelCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerEnter?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerEnterCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerLeave?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerLeaveCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOver?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOverCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOut?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOutCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onGotPointerCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onGotPointerCaptureCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onLostPointerCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onLostPointerCaptureCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onScroll?: ((event: React.UIEvent<HTMLDivElement>) => void) | undefined;
    onScrollCapture?: ((event: React.UIEvent<HTMLDivElement>) => void) | undefined;
    onWheel?: ((event: React.WheelEvent<HTMLDivElement>) => void) | undefined;
    onWheelCapture?: ((event: React.WheelEvent<HTMLDivElement>) => void) | undefined;
    onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationEnd?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationIteration?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onTransitionEnd?: ((event: React.TransitionEvent<HTMLDivElement>) => void) | undefined;
    onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLDivElement>) => void) | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: boolean | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: boolean | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: boolean | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
} & MotionProps & React.RefAttributes<HTMLDivElement> & {
    skipTheme?: boolean | undefined;
}, "inherit" | "initial" | "hidden" | "color" | "transition" | "animate" | "whileHover" | "variants" | "skipTheme" | "whileTap" | "style" | "title" | "key" | "children" | "transformTemplate" | "transformValues" | "exit" | "positionTransition" | "layoutTransition" | "onUpdate" | "onAnimationStart" | "onAnimationComplete" | "onPan" | "onPanStart" | "onPanSessionStart" | "onPanEnd" | "onTap" | "onTapStart" | "onTapCancel" | "onHoverStart" | "onHoverEnd" | "drag" | "dragDirectionLock" | "dragPropagation" | "dragConstraints" | "dragElastic" | "dragMomentum" | "dragTransition" | "_dragValueX" | "_dragValueY" | "_dragTransitionControls" | "dragOriginX" | "dragOriginY" | "onDragStart" | "onDragEnd" | "onDrag" | "onDirectionLock" | "onDragTransitionEnd" | "custom" | "static" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDragCapture" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "placeholder" | "slot" | "spellCheck" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is"> & React.RefAttributes<React.Component<{}, {}, any>>>, any, BoxProps, never>;
declare const Cell: StyledComponent<React.ForwardRefExoticComponent<Pick<{
    hidden?: boolean | undefined;
    color?: string | undefined;
    title?: string | undefined;
    children?: React.ReactNode;
    className?: string | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    role?: string | undefined;
    tabIndex?: number | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: boolean | "false" | "true" | undefined;
    "aria-autocomplete"?: "none" | "list" | "inline" | "both" | undefined;
    "aria-busy"?: boolean | "false" | "true" | undefined;
    "aria-checked"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "step" | "false" | "true" | "page" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: boolean | "false" | "true" | undefined;
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: boolean | "false" | "true" | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: boolean | "false" | "true" | undefined;
    "aria-haspopup"?: boolean | "grid" | "dialog" | "menu" | "false" | "true" | "listbox" | "tree" | undefined;
    "aria-hidden"?: boolean | "false" | "true" | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: boolean | "false" | "true" | undefined;
    "aria-multiline"?: boolean | "false" | "true" | undefined;
    "aria-multiselectable"?: boolean | "false" | "true" | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-readonly"?: boolean | "false" | "true" | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals" | undefined;
    "aria-required"?: boolean | "false" | "true" | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: boolean | "false" | "true" | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCopyCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCut?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCutCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onPaste?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onPasteCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
    onCompositionEnd?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionStart?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionUpdate?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
    onFocus?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onFocusCapture?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onBlur?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onBlurCapture?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
    onChange?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onChangeCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onBeforeInput?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onBeforeInputCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInput?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInputCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onReset?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onResetCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onSubmit?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onSubmitCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInvalid?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onInvalidCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
    onLoad?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onError?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onErrorCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyPress?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyUp?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    onAbort?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onAbortCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlay?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onDurationChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEmptied?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEncrypted?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEnded?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onEndedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedData?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadStart?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPause?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPauseCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlay?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlayCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlaying?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onPlayingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onProgress?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onProgressCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onRateChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeeked?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeekedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeeking?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSeekingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onStalled?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onStalledCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSuspend?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSuspendCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onTimeUpdate?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onVolumeChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onWaiting?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onWaitingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onAuxClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onAuxClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onContextMenu?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onContextMenuCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onDoubleClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onDoubleClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onDragCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragEndCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragEnter?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragEnterCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragExit?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragExitCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragLeave?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragLeaveCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragOver?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragOverCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDragStartCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDrop?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onDropCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
    onMouseDown?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseDownCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseEnter?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseLeave?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseMove?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseMoveCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOut?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOutCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOver?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseOverCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseUp?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onMouseUpCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onSelect?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onSelectCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
    onTouchCancel?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchCancelCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchEnd?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchEndCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchMove?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchMoveCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchStart?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onTouchStartCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
    onPointerDown?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerDownCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerMove?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerMoveCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerUp?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerUpCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerCancel?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerCancelCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerEnter?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerEnterCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerLeave?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerLeaveCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOver?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOverCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOut?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onPointerOutCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onGotPointerCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onGotPointerCaptureCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onLostPointerCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onLostPointerCaptureCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
    onScroll?: ((event: React.UIEvent<HTMLDivElement>) => void) | undefined;
    onScrollCapture?: ((event: React.UIEvent<HTMLDivElement>) => void) | undefined;
    onWheel?: ((event: React.WheelEvent<HTMLDivElement>) => void) | undefined;
    onWheelCapture?: ((event: React.WheelEvent<HTMLDivElement>) => void) | undefined;
    onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationEnd?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationIteration?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
    onTransitionEnd?: ((event: React.TransitionEvent<HTMLDivElement>) => void) | undefined;
    onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLDivElement>) => void) | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: boolean | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: boolean | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: boolean | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
} & MotionProps & React.RefAttributes<HTMLDivElement> & {
    skipTheme?: boolean | undefined;
}, "inherit" | "initial" | "hidden" | "color" | "transition" | "animate" | "whileHover" | "variants" | "skipTheme" | "whileTap" | "style" | "title" | "key" | "children" | "transformTemplate" | "transformValues" | "exit" | "positionTransition" | "layoutTransition" | "onUpdate" | "onAnimationStart" | "onAnimationComplete" | "onPan" | "onPanStart" | "onPanSessionStart" | "onPanEnd" | "onTap" | "onTapStart" | "onTapCancel" | "onHoverStart" | "onHoverEnd" | "drag" | "dragDirectionLock" | "dragPropagation" | "dragConstraints" | "dragElastic" | "dragMomentum" | "dragTransition" | "_dragValueX" | "_dragValueY" | "_dragTransitionControls" | "dragOriginX" | "dragOriginY" | "onDragStart" | "onDragEnd" | "onDrag" | "onDirectionLock" | "onDragTransitionEnd" | "custom" | "static" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDragCapture" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "placeholder" | "slot" | "spellCheck" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is"> & React.RefAttributes<React.Component<{}, {}, any>>>, any, BoxProps, never>;
declare const Span: StyledComponent<React.ForwardRefExoticComponent<Pick<{
    hidden?: boolean | undefined;
    color?: string | undefined;
    title?: string | undefined;
    children?: React.ReactNode;
    className?: string | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    role?: string | undefined;
    tabIndex?: number | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: boolean | "false" | "true" | undefined;
    "aria-autocomplete"?: "none" | "list" | "inline" | "both" | undefined;
    "aria-busy"?: boolean | "false" | "true" | undefined;
    "aria-checked"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "step" | "false" | "true" | "page" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: boolean | "false" | "true" | undefined;
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: boolean | "false" | "true" | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: boolean | "false" | "true" | undefined;
    "aria-haspopup"?: boolean | "grid" | "dialog" | "menu" | "false" | "true" | "listbox" | "tree" | undefined;
    "aria-hidden"?: boolean | "false" | "true" | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: boolean | "false" | "true" | undefined;
    "aria-multiline"?: boolean | "false" | "true" | undefined;
    "aria-multiselectable"?: boolean | "false" | "true" | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-readonly"?: boolean | "false" | "true" | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals" | undefined;
    "aria-required"?: boolean | "false" | "true" | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: boolean | "false" | "true" | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: ((event: React.ClipboardEvent<HTMLSpanElement>) => void) | undefined;
    onCopyCapture?: ((event: React.ClipboardEvent<HTMLSpanElement>) => void) | undefined;
    onCut?: ((event: React.ClipboardEvent<HTMLSpanElement>) => void) | undefined;
    onCutCapture?: ((event: React.ClipboardEvent<HTMLSpanElement>) => void) | undefined;
    onPaste?: ((event: React.ClipboardEvent<HTMLSpanElement>) => void) | undefined;
    onPasteCapture?: ((event: React.ClipboardEvent<HTMLSpanElement>) => void) | undefined;
    onCompositionEnd?: ((event: React.CompositionEvent<HTMLSpanElement>) => void) | undefined;
    onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLSpanElement>) => void) | undefined;
    onCompositionStart?: ((event: React.CompositionEvent<HTMLSpanElement>) => void) | undefined;
    onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLSpanElement>) => void) | undefined;
    onCompositionUpdate?: ((event: React.CompositionEvent<HTMLSpanElement>) => void) | undefined;
    onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLSpanElement>) => void) | undefined;
    onFocus?: ((event: React.FocusEvent<HTMLSpanElement>) => void) | undefined;
    onFocusCapture?: ((event: React.FocusEvent<HTMLSpanElement>) => void) | undefined;
    onBlur?: ((event: React.FocusEvent<HTMLSpanElement>) => void) | undefined;
    onBlurCapture?: ((event: React.FocusEvent<HTMLSpanElement>) => void) | undefined;
    onChange?: ((event: React.FormEvent<HTMLSpanElement>) => void) | undefined;
    onChangeCapture?: ((event: React.FormEvent<HTMLSpanElement>) => void) | undefined;
    onBeforeInput?: ((event: React.FormEvent<HTMLSpanElement>) => void) | undefined;
    onBeforeInputCapture?: ((event: React.FormEvent<HTMLSpanElement>) => void) | undefined;
    onInput?: ((event: React.FormEvent<HTMLSpanElement>) => void) | undefined;
    onInputCapture?: ((event: React.FormEvent<HTMLSpanElement>) => void) | undefined;
    onReset?: ((event: React.FormEvent<HTMLSpanElement>) => void) | undefined;
    onResetCapture?: ((event: React.FormEvent<HTMLSpanElement>) => void) | undefined;
    onSubmit?: ((event: React.FormEvent<HTMLSpanElement>) => void) | undefined;
    onSubmitCapture?: ((event: React.FormEvent<HTMLSpanElement>) => void) | undefined;
    onInvalid?: ((event: React.FormEvent<HTMLSpanElement>) => void) | undefined;
    onInvalidCapture?: ((event: React.FormEvent<HTMLSpanElement>) => void) | undefined;
    onLoad?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onLoadCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onError?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onErrorCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<HTMLSpanElement>) => void) | undefined;
    onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLSpanElement>) => void) | undefined;
    onKeyPress?: ((event: React.KeyboardEvent<HTMLSpanElement>) => void) | undefined;
    onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLSpanElement>) => void) | undefined;
    onKeyUp?: ((event: React.KeyboardEvent<HTMLSpanElement>) => void) | undefined;
    onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLSpanElement>) => void) | undefined;
    onAbort?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onAbortCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onCanPlay?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onDurationChange?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onEmptied?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onEncrypted?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onEnded?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onEndedCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onLoadedData?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onLoadStart?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onPause?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onPauseCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onPlay?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onPlayCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onPlaying?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onPlayingCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onProgress?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onProgressCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onRateChange?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onSeeked?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onSeekedCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onSeeking?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onSeekingCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onStalled?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onStalledCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onSuspend?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onSuspendCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onTimeUpdate?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onVolumeChange?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onWaiting?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onWaitingCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onAuxClick?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onAuxClickCapture?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onClick?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onClickCapture?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onContextMenu?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onContextMenuCapture?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onDoubleClick?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onDoubleClickCapture?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onDragCapture?: ((event: React.DragEvent<HTMLSpanElement>) => void) | undefined;
    onDragEndCapture?: ((event: React.DragEvent<HTMLSpanElement>) => void) | undefined;
    onDragEnter?: ((event: React.DragEvent<HTMLSpanElement>) => void) | undefined;
    onDragEnterCapture?: ((event: React.DragEvent<HTMLSpanElement>) => void) | undefined;
    onDragExit?: ((event: React.DragEvent<HTMLSpanElement>) => void) | undefined;
    onDragExitCapture?: ((event: React.DragEvent<HTMLSpanElement>) => void) | undefined;
    onDragLeave?: ((event: React.DragEvent<HTMLSpanElement>) => void) | undefined;
    onDragLeaveCapture?: ((event: React.DragEvent<HTMLSpanElement>) => void) | undefined;
    onDragOver?: ((event: React.DragEvent<HTMLSpanElement>) => void) | undefined;
    onDragOverCapture?: ((event: React.DragEvent<HTMLSpanElement>) => void) | undefined;
    onDragStartCapture?: ((event: React.DragEvent<HTMLSpanElement>) => void) | undefined;
    onDrop?: ((event: React.DragEvent<HTMLSpanElement>) => void) | undefined;
    onDropCapture?: ((event: React.DragEvent<HTMLSpanElement>) => void) | undefined;
    onMouseDown?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onMouseDownCapture?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onMouseEnter?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onMouseLeave?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onMouseMove?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onMouseMoveCapture?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onMouseOut?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onMouseOutCapture?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onMouseOver?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onMouseOverCapture?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onMouseUp?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onMouseUpCapture?: ((event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void) | undefined;
    onSelect?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onSelectCapture?: ((event: React.SyntheticEvent<HTMLSpanElement, Event>) => void) | undefined;
    onTouchCancel?: ((event: React.TouchEvent<HTMLSpanElement>) => void) | undefined;
    onTouchCancelCapture?: ((event: React.TouchEvent<HTMLSpanElement>) => void) | undefined;
    onTouchEnd?: ((event: React.TouchEvent<HTMLSpanElement>) => void) | undefined;
    onTouchEndCapture?: ((event: React.TouchEvent<HTMLSpanElement>) => void) | undefined;
    onTouchMove?: ((event: React.TouchEvent<HTMLSpanElement>) => void) | undefined;
    onTouchMoveCapture?: ((event: React.TouchEvent<HTMLSpanElement>) => void) | undefined;
    onTouchStart?: ((event: React.TouchEvent<HTMLSpanElement>) => void) | undefined;
    onTouchStartCapture?: ((event: React.TouchEvent<HTMLSpanElement>) => void) | undefined;
    onPointerDown?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onPointerDownCapture?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onPointerMove?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onPointerMoveCapture?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onPointerUp?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onPointerUpCapture?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onPointerCancel?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onPointerCancelCapture?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onPointerEnter?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onPointerEnterCapture?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onPointerLeave?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onPointerLeaveCapture?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onPointerOver?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onPointerOverCapture?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onPointerOut?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onPointerOutCapture?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onGotPointerCapture?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onGotPointerCaptureCapture?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onLostPointerCapture?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onLostPointerCaptureCapture?: ((event: React.PointerEvent<HTMLSpanElement>) => void) | undefined;
    onScroll?: ((event: React.UIEvent<HTMLSpanElement>) => void) | undefined;
    onScrollCapture?: ((event: React.UIEvent<HTMLSpanElement>) => void) | undefined;
    onWheel?: ((event: React.WheelEvent<HTMLSpanElement>) => void) | undefined;
    onWheelCapture?: ((event: React.WheelEvent<HTMLSpanElement>) => void) | undefined;
    onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLSpanElement>) => void) | undefined;
    onAnimationEnd?: ((event: React.AnimationEvent<HTMLSpanElement>) => void) | undefined;
    onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLSpanElement>) => void) | undefined;
    onAnimationIteration?: ((event: React.AnimationEvent<HTMLSpanElement>) => void) | undefined;
    onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLSpanElement>) => void) | undefined;
    onTransitionEnd?: ((event: React.TransitionEvent<HTMLSpanElement>) => void) | undefined;
    onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLSpanElement>) => void) | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: boolean | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: boolean | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: boolean | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
} & MotionProps & React.RefAttributes<HTMLSpanElement> & {
    skipTheme?: boolean | undefined;
}, "inherit" | "initial" | "hidden" | "color" | "transition" | "animate" | "whileHover" | "variants" | "skipTheme" | "whileTap" | "style" | "title" | "key" | "children" | "transformTemplate" | "transformValues" | "exit" | "positionTransition" | "layoutTransition" | "onUpdate" | "onAnimationStart" | "onAnimationComplete" | "onPan" | "onPanStart" | "onPanSessionStart" | "onPanEnd" | "onTap" | "onTapStart" | "onTapCancel" | "onHoverStart" | "onHoverEnd" | "drag" | "dragDirectionLock" | "dragPropagation" | "dragConstraints" | "dragElastic" | "dragMomentum" | "dragTransition" | "_dragValueX" | "_dragValueY" | "_dragTransitionControls" | "dragOriginX" | "dragOriginY" | "onDragStart" | "onDragEnd" | "onDrag" | "onDirectionLock" | "onDragTransitionEnd" | "custom" | "static" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDragCapture" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "placeholder" | "slot" | "spellCheck" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is"> & React.RefAttributes<React.Component<{}, {}, any>>>, any, BoxProps, never>;
declare const Image: StyledComponent<React.ForwardRefExoticComponent<Pick<{
    hidden?: boolean | undefined;
    color?: string | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    title?: string | undefined;
    children?: React.ReactNode;
    className?: string | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    role?: string | undefined;
    tabIndex?: number | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: boolean | "false" | "true" | undefined;
    "aria-autocomplete"?: "none" | "list" | "inline" | "both" | undefined;
    "aria-busy"?: boolean | "false" | "true" | undefined;
    "aria-checked"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "step" | "false" | "true" | "page" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: boolean | "false" | "true" | undefined;
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: boolean | "false" | "true" | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: boolean | "false" | "true" | undefined;
    "aria-haspopup"?: boolean | "grid" | "dialog" | "menu" | "false" | "true" | "listbox" | "tree" | undefined;
    "aria-hidden"?: boolean | "false" | "true" | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: boolean | "false" | "true" | undefined;
    "aria-multiline"?: boolean | "false" | "true" | undefined;
    "aria-multiselectable"?: boolean | "false" | "true" | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-readonly"?: boolean | "false" | "true" | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals" | undefined;
    "aria-required"?: boolean | "false" | "true" | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: boolean | "false" | "true" | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: ((event: React.ClipboardEvent<HTMLImageElement>) => void) | undefined;
    onCopyCapture?: ((event: React.ClipboardEvent<HTMLImageElement>) => void) | undefined;
    onCut?: ((event: React.ClipboardEvent<HTMLImageElement>) => void) | undefined;
    onCutCapture?: ((event: React.ClipboardEvent<HTMLImageElement>) => void) | undefined;
    onPaste?: ((event: React.ClipboardEvent<HTMLImageElement>) => void) | undefined;
    onPasteCapture?: ((event: React.ClipboardEvent<HTMLImageElement>) => void) | undefined;
    onCompositionEnd?: ((event: React.CompositionEvent<HTMLImageElement>) => void) | undefined;
    onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLImageElement>) => void) | undefined;
    onCompositionStart?: ((event: React.CompositionEvent<HTMLImageElement>) => void) | undefined;
    onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLImageElement>) => void) | undefined;
    onCompositionUpdate?: ((event: React.CompositionEvent<HTMLImageElement>) => void) | undefined;
    onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLImageElement>) => void) | undefined;
    onFocus?: ((event: React.FocusEvent<HTMLImageElement>) => void) | undefined;
    onFocusCapture?: ((event: React.FocusEvent<HTMLImageElement>) => void) | undefined;
    onBlur?: ((event: React.FocusEvent<HTMLImageElement>) => void) | undefined;
    onBlurCapture?: ((event: React.FocusEvent<HTMLImageElement>) => void) | undefined;
    onChange?: ((event: React.FormEvent<HTMLImageElement>) => void) | undefined;
    onChangeCapture?: ((event: React.FormEvent<HTMLImageElement>) => void) | undefined;
    onBeforeInput?: ((event: React.FormEvent<HTMLImageElement>) => void) | undefined;
    onBeforeInputCapture?: ((event: React.FormEvent<HTMLImageElement>) => void) | undefined;
    onInput?: ((event: React.FormEvent<HTMLImageElement>) => void) | undefined;
    onInputCapture?: ((event: React.FormEvent<HTMLImageElement>) => void) | undefined;
    onReset?: ((event: React.FormEvent<HTMLImageElement>) => void) | undefined;
    onResetCapture?: ((event: React.FormEvent<HTMLImageElement>) => void) | undefined;
    onSubmit?: ((event: React.FormEvent<HTMLImageElement>) => void) | undefined;
    onSubmitCapture?: ((event: React.FormEvent<HTMLImageElement>) => void) | undefined;
    onInvalid?: ((event: React.FormEvent<HTMLImageElement>) => void) | undefined;
    onInvalidCapture?: ((event: React.FormEvent<HTMLImageElement>) => void) | undefined;
    onLoad?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onLoadCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onError?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onErrorCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<HTMLImageElement>) => void) | undefined;
    onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLImageElement>) => void) | undefined;
    onKeyPress?: ((event: React.KeyboardEvent<HTMLImageElement>) => void) | undefined;
    onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLImageElement>) => void) | undefined;
    onKeyUp?: ((event: React.KeyboardEvent<HTMLImageElement>) => void) | undefined;
    onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLImageElement>) => void) | undefined;
    onAbort?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onAbortCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onCanPlay?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onDurationChange?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onEmptied?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onEncrypted?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onEnded?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onEndedCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onLoadedData?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onLoadStart?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onPause?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onPauseCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onPlay?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onPlayCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onPlaying?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onPlayingCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onProgress?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onProgressCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onRateChange?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onSeeked?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onSeekedCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onSeeking?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onSeekingCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onStalled?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onStalledCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onSuspend?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onSuspendCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onTimeUpdate?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onVolumeChange?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onWaiting?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onWaitingCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onAuxClick?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onAuxClickCapture?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onClick?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onClickCapture?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onContextMenu?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onContextMenuCapture?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onDoubleClick?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onDoubleClickCapture?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onDragCapture?: ((event: React.DragEvent<HTMLImageElement>) => void) | undefined;
    onDragEndCapture?: ((event: React.DragEvent<HTMLImageElement>) => void) | undefined;
    onDragEnter?: ((event: React.DragEvent<HTMLImageElement>) => void) | undefined;
    onDragEnterCapture?: ((event: React.DragEvent<HTMLImageElement>) => void) | undefined;
    onDragExit?: ((event: React.DragEvent<HTMLImageElement>) => void) | undefined;
    onDragExitCapture?: ((event: React.DragEvent<HTMLImageElement>) => void) | undefined;
    onDragLeave?: ((event: React.DragEvent<HTMLImageElement>) => void) | undefined;
    onDragLeaveCapture?: ((event: React.DragEvent<HTMLImageElement>) => void) | undefined;
    onDragOver?: ((event: React.DragEvent<HTMLImageElement>) => void) | undefined;
    onDragOverCapture?: ((event: React.DragEvent<HTMLImageElement>) => void) | undefined;
    onDragStartCapture?: ((event: React.DragEvent<HTMLImageElement>) => void) | undefined;
    onDrop?: ((event: React.DragEvent<HTMLImageElement>) => void) | undefined;
    onDropCapture?: ((event: React.DragEvent<HTMLImageElement>) => void) | undefined;
    onMouseDown?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onMouseDownCapture?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onMouseEnter?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onMouseLeave?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onMouseMove?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onMouseMoveCapture?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onMouseOut?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onMouseOutCapture?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onMouseOver?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onMouseOverCapture?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onMouseUp?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onMouseUpCapture?: ((event: React.MouseEvent<HTMLImageElement, MouseEvent>) => void) | undefined;
    onSelect?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onSelectCapture?: ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined;
    onTouchCancel?: ((event: React.TouchEvent<HTMLImageElement>) => void) | undefined;
    onTouchCancelCapture?: ((event: React.TouchEvent<HTMLImageElement>) => void) | undefined;
    onTouchEnd?: ((event: React.TouchEvent<HTMLImageElement>) => void) | undefined;
    onTouchEndCapture?: ((event: React.TouchEvent<HTMLImageElement>) => void) | undefined;
    onTouchMove?: ((event: React.TouchEvent<HTMLImageElement>) => void) | undefined;
    onTouchMoveCapture?: ((event: React.TouchEvent<HTMLImageElement>) => void) | undefined;
    onTouchStart?: ((event: React.TouchEvent<HTMLImageElement>) => void) | undefined;
    onTouchStartCapture?: ((event: React.TouchEvent<HTMLImageElement>) => void) | undefined;
    onPointerDown?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onPointerDownCapture?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onPointerMove?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onPointerMoveCapture?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onPointerUp?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onPointerUpCapture?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onPointerCancel?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onPointerCancelCapture?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onPointerEnter?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onPointerEnterCapture?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onPointerLeave?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onPointerLeaveCapture?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onPointerOver?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onPointerOverCapture?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onPointerOut?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onPointerOutCapture?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onGotPointerCapture?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onGotPointerCaptureCapture?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onLostPointerCapture?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onLostPointerCaptureCapture?: ((event: React.PointerEvent<HTMLImageElement>) => void) | undefined;
    onScroll?: ((event: React.UIEvent<HTMLImageElement>) => void) | undefined;
    onScrollCapture?: ((event: React.UIEvent<HTMLImageElement>) => void) | undefined;
    onWheel?: ((event: React.WheelEvent<HTMLImageElement>) => void) | undefined;
    onWheelCapture?: ((event: React.WheelEvent<HTMLImageElement>) => void) | undefined;
    onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLImageElement>) => void) | undefined;
    onAnimationEnd?: ((event: React.AnimationEvent<HTMLImageElement>) => void) | undefined;
    onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLImageElement>) => void) | undefined;
    onAnimationIteration?: ((event: React.AnimationEvent<HTMLImageElement>) => void) | undefined;
    onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLImageElement>) => void) | undefined;
    onTransitionEnd?: ((event: React.TransitionEvent<HTMLImageElement>) => void) | undefined;
    onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLImageElement>) => void) | undefined;
    useMap?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: boolean | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: boolean | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: boolean | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
    alt?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    src?: string | undefined;
    decoding?: "auto" | "async" | "sync" | undefined;
    sizes?: string | undefined;
    srcSet?: string | undefined;
} & MotionProps & React.RefAttributes<HTMLImageElement> & {
    skipTheme?: boolean | undefined;
}, "inherit" | "initial" | "hidden" | "color" | "height" | "width" | "transition" | "animate" | "whileHover" | "variants" | "skipTheme" | "whileTap" | "style" | "title" | "key" | "children" | "transformTemplate" | "transformValues" | "exit" | "positionTransition" | "layoutTransition" | "onUpdate" | "onAnimationStart" | "onAnimationComplete" | "onPan" | "onPanStart" | "onPanSessionStart" | "onPanEnd" | "onTap" | "onTapStart" | "onTapCancel" | "onHoverStart" | "onHoverEnd" | "drag" | "dragDirectionLock" | "dragPropagation" | "dragConstraints" | "dragElastic" | "dragMomentum" | "dragTransition" | "_dragValueX" | "_dragValueY" | "_dragTransitionControls" | "dragOriginX" | "dragOriginY" | "onDragStart" | "onDragEnd" | "onDrag" | "onDirectionLock" | "onDragTransitionEnd" | "custom" | "static" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDragCapture" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "useMap" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "placeholder" | "slot" | "spellCheck" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "alt" | "crossOrigin" | "src" | "decoding" | "sizes" | "srcSet"> & React.RefAttributes<React.Component<{}, {}, any>>>, any, BoxProps, never>;
declare const Button: StyledComponent<React.ForwardRefExoticComponent<Pick<{
    hidden?: boolean | undefined;
    color?: string | undefined;
    form?: string | undefined;
    title?: string | undefined;
    children?: React.ReactNode;
    type?: "button" | "submit" | "reset" | undefined;
    className?: string | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    name?: string | undefined;
    role?: string | undefined;
    tabIndex?: number | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: boolean | "false" | "true" | undefined;
    "aria-autocomplete"?: "none" | "list" | "inline" | "both" | undefined;
    "aria-busy"?: boolean | "false" | "true" | undefined;
    "aria-checked"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "step" | "false" | "true" | "page" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: boolean | "false" | "true" | undefined;
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: boolean | "false" | "true" | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: boolean | "false" | "true" | undefined;
    "aria-haspopup"?: boolean | "grid" | "dialog" | "menu" | "false" | "true" | "listbox" | "tree" | undefined;
    "aria-hidden"?: boolean | "false" | "true" | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: boolean | "false" | "true" | undefined;
    "aria-multiline"?: boolean | "false" | "true" | undefined;
    "aria-multiselectable"?: boolean | "false" | "true" | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-readonly"?: boolean | "false" | "true" | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals" | undefined;
    "aria-required"?: boolean | "false" | "true" | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: boolean | "false" | "true" | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: ((event: React.ClipboardEvent<HTMLButtonElement>) => void) | undefined;
    onCopyCapture?: ((event: React.ClipboardEvent<HTMLButtonElement>) => void) | undefined;
    onCut?: ((event: React.ClipboardEvent<HTMLButtonElement>) => void) | undefined;
    onCutCapture?: ((event: React.ClipboardEvent<HTMLButtonElement>) => void) | undefined;
    onPaste?: ((event: React.ClipboardEvent<HTMLButtonElement>) => void) | undefined;
    onPasteCapture?: ((event: React.ClipboardEvent<HTMLButtonElement>) => void) | undefined;
    onCompositionEnd?: ((event: React.CompositionEvent<HTMLButtonElement>) => void) | undefined;
    onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLButtonElement>) => void) | undefined;
    onCompositionStart?: ((event: React.CompositionEvent<HTMLButtonElement>) => void) | undefined;
    onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLButtonElement>) => void) | undefined;
    onCompositionUpdate?: ((event: React.CompositionEvent<HTMLButtonElement>) => void) | undefined;
    onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLButtonElement>) => void) | undefined;
    onFocus?: ((event: React.FocusEvent<HTMLButtonElement>) => void) | undefined;
    onFocusCapture?: ((event: React.FocusEvent<HTMLButtonElement>) => void) | undefined;
    onBlur?: ((event: React.FocusEvent<HTMLButtonElement>) => void) | undefined;
    onBlurCapture?: ((event: React.FocusEvent<HTMLButtonElement>) => void) | undefined;
    onChange?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
    onChangeCapture?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
    onBeforeInput?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
    onBeforeInputCapture?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
    onInput?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
    onInputCapture?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
    onReset?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
    onResetCapture?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
    onSubmit?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
    onSubmitCapture?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
    onInvalid?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
    onInvalidCapture?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
    onLoad?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onLoadCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onError?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onErrorCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
    onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
    onKeyPress?: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
    onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
    onKeyUp?: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
    onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
    onAbort?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onAbortCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onCanPlay?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onDurationChange?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onEmptied?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onEncrypted?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onEnded?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onEndedCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onLoadedData?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onLoadStart?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onPause?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onPauseCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onPlay?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onPlayCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onPlaying?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onPlayingCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onProgress?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onProgressCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onRateChange?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onSeeked?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onSeekedCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onSeeking?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onSeekingCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onStalled?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onStalledCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onSuspend?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onSuspendCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onTimeUpdate?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onVolumeChange?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onWaiting?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onWaitingCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onAuxClick?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onAuxClickCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onClick?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onClickCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onContextMenu?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onContextMenuCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onDoubleClick?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onDoubleClickCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onDragCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
    onDragEndCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
    onDragEnter?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
    onDragEnterCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
    onDragExit?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
    onDragExitCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
    onDragLeave?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
    onDragLeaveCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
    onDragOver?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
    onDragOverCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
    onDragStartCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
    onDrop?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
    onDropCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
    onMouseDown?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onMouseDownCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onMouseEnter?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onMouseLeave?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onMouseMove?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onMouseMoveCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onMouseOut?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onMouseOutCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onMouseOver?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onMouseOverCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onMouseUp?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onMouseUpCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    onSelect?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onSelectCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
    onTouchCancel?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
    onTouchCancelCapture?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
    onTouchEnd?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
    onTouchEndCapture?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
    onTouchMove?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
    onTouchMoveCapture?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
    onTouchStart?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
    onTouchStartCapture?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
    onPointerDown?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onPointerDownCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onPointerMove?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onPointerMoveCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onPointerUp?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onPointerUpCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onPointerCancel?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onPointerCancelCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onPointerEnter?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onPointerEnterCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onPointerLeave?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onPointerLeaveCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onPointerOver?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onPointerOverCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onPointerOut?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onPointerOutCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onGotPointerCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onGotPointerCaptureCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onLostPointerCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onLostPointerCaptureCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    onScroll?: ((event: React.UIEvent<HTMLButtonElement>) => void) | undefined;
    onScrollCapture?: ((event: React.UIEvent<HTMLButtonElement>) => void) | undefined;
    onWheel?: ((event: React.WheelEvent<HTMLButtonElement>) => void) | undefined;
    onWheelCapture?: ((event: React.WheelEvent<HTMLButtonElement>) => void) | undefined;
    onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLButtonElement>) => void) | undefined;
    onAnimationEnd?: ((event: React.AnimationEvent<HTMLButtonElement>) => void) | undefined;
    onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLButtonElement>) => void) | undefined;
    onAnimationIteration?: ((event: React.AnimationEvent<HTMLButtonElement>) => void) | undefined;
    onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLButtonElement>) => void) | undefined;
    onTransitionEnd?: ((event: React.TransitionEvent<HTMLButtonElement>) => void) | undefined;
    onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLButtonElement>) => void) | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: boolean | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: boolean | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: boolean | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
    value?: string | number | string[] | undefined;
    autoFocus?: boolean | undefined;
    disabled?: boolean | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
} & MotionProps & React.RefAttributes<HTMLButtonElement> & {
    skipTheme?: boolean | undefined;
}, "inherit" | "initial" | "hidden" | "color" | "transition" | "animate" | "whileHover" | "variants" | "skipTheme" | "whileTap" | "form" | "style" | "title" | "key" | "children" | "transformTemplate" | "transformValues" | "exit" | "positionTransition" | "layoutTransition" | "onUpdate" | "onAnimationStart" | "onAnimationComplete" | "onPan" | "onPanStart" | "onPanSessionStart" | "onPanEnd" | "onTap" | "onTapStart" | "onTapCancel" | "onHoverStart" | "onHoverEnd" | "drag" | "dragDirectionLock" | "dragPropagation" | "dragConstraints" | "dragElastic" | "dragMomentum" | "dragTransition" | "_dragValueX" | "_dragValueY" | "_dragTransitionControls" | "dragOriginX" | "dragOriginY" | "onDragStart" | "onDragEnd" | "onDrag" | "onDirectionLock" | "onDragTransitionEnd" | "custom" | "static" | "type" | "className" | "id" | "lang" | "name" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDragCapture" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "placeholder" | "slot" | "spellCheck" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "value" | "autoFocus" | "disabled" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget"> & React.RefAttributes<React.Component<{}, {}, any>>>, any, BoxProps, never>;
interface TextProps {
    variant?: string;
    center?: boolean;
}
declare const Text: StyledComponent<React.ForwardRefExoticComponent<Pick<{
    hidden?: boolean | undefined;
    color?: string | undefined;
    title?: string | undefined;
    children?: React.ReactNode;
    className?: string | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    role?: string | undefined;
    tabIndex?: number | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: boolean | "false" | "true" | undefined;
    "aria-autocomplete"?: "none" | "list" | "inline" | "both" | undefined;
    "aria-busy"?: boolean | "false" | "true" | undefined;
    "aria-checked"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "step" | "false" | "true" | "page" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: boolean | "false" | "true" | undefined;
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: boolean | "false" | "true" | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: boolean | "false" | "true" | undefined;
    "aria-haspopup"?: boolean | "grid" | "dialog" | "menu" | "false" | "true" | "listbox" | "tree" | undefined;
    "aria-hidden"?: boolean | "false" | "true" | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: boolean | "false" | "true" | undefined;
    "aria-multiline"?: boolean | "false" | "true" | undefined;
    "aria-multiselectable"?: boolean | "false" | "true" | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-readonly"?: boolean | "false" | "true" | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals" | undefined;
    "aria-required"?: boolean | "false" | "true" | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: boolean | "false" | "true" | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: ((event: React.ClipboardEvent<HTMLParagraphElement>) => void) | undefined;
    onCopyCapture?: ((event: React.ClipboardEvent<HTMLParagraphElement>) => void) | undefined;
    onCut?: ((event: React.ClipboardEvent<HTMLParagraphElement>) => void) | undefined;
    onCutCapture?: ((event: React.ClipboardEvent<HTMLParagraphElement>) => void) | undefined;
    onPaste?: ((event: React.ClipboardEvent<HTMLParagraphElement>) => void) | undefined;
    onPasteCapture?: ((event: React.ClipboardEvent<HTMLParagraphElement>) => void) | undefined;
    onCompositionEnd?: ((event: React.CompositionEvent<HTMLParagraphElement>) => void) | undefined;
    onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLParagraphElement>) => void) | undefined;
    onCompositionStart?: ((event: React.CompositionEvent<HTMLParagraphElement>) => void) | undefined;
    onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLParagraphElement>) => void) | undefined;
    onCompositionUpdate?: ((event: React.CompositionEvent<HTMLParagraphElement>) => void) | undefined;
    onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLParagraphElement>) => void) | undefined;
    onFocus?: ((event: React.FocusEvent<HTMLParagraphElement>) => void) | undefined;
    onFocusCapture?: ((event: React.FocusEvent<HTMLParagraphElement>) => void) | undefined;
    onBlur?: ((event: React.FocusEvent<HTMLParagraphElement>) => void) | undefined;
    onBlurCapture?: ((event: React.FocusEvent<HTMLParagraphElement>) => void) | undefined;
    onChange?: ((event: React.FormEvent<HTMLParagraphElement>) => void) | undefined;
    onChangeCapture?: ((event: React.FormEvent<HTMLParagraphElement>) => void) | undefined;
    onBeforeInput?: ((event: React.FormEvent<HTMLParagraphElement>) => void) | undefined;
    onBeforeInputCapture?: ((event: React.FormEvent<HTMLParagraphElement>) => void) | undefined;
    onInput?: ((event: React.FormEvent<HTMLParagraphElement>) => void) | undefined;
    onInputCapture?: ((event: React.FormEvent<HTMLParagraphElement>) => void) | undefined;
    onReset?: ((event: React.FormEvent<HTMLParagraphElement>) => void) | undefined;
    onResetCapture?: ((event: React.FormEvent<HTMLParagraphElement>) => void) | undefined;
    onSubmit?: ((event: React.FormEvent<HTMLParagraphElement>) => void) | undefined;
    onSubmitCapture?: ((event: React.FormEvent<HTMLParagraphElement>) => void) | undefined;
    onInvalid?: ((event: React.FormEvent<HTMLParagraphElement>) => void) | undefined;
    onInvalidCapture?: ((event: React.FormEvent<HTMLParagraphElement>) => void) | undefined;
    onLoad?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onLoadCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onError?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onErrorCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<HTMLParagraphElement>) => void) | undefined;
    onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLParagraphElement>) => void) | undefined;
    onKeyPress?: ((event: React.KeyboardEvent<HTMLParagraphElement>) => void) | undefined;
    onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLParagraphElement>) => void) | undefined;
    onKeyUp?: ((event: React.KeyboardEvent<HTMLParagraphElement>) => void) | undefined;
    onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLParagraphElement>) => void) | undefined;
    onAbort?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onAbortCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onCanPlay?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onDurationChange?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onEmptied?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onEncrypted?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onEnded?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onEndedCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onLoadedData?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onLoadStart?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onPause?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onPauseCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onPlay?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onPlayCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onPlaying?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onPlayingCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onProgress?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onProgressCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onRateChange?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onSeeked?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onSeekedCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onSeeking?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onSeekingCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onStalled?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onStalledCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onSuspend?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onSuspendCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onTimeUpdate?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onVolumeChange?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onWaiting?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onWaitingCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onAuxClick?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onAuxClickCapture?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onClick?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onClickCapture?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onContextMenu?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onContextMenuCapture?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onDoubleClick?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onDoubleClickCapture?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onDragCapture?: ((event: React.DragEvent<HTMLParagraphElement>) => void) | undefined;
    onDragEndCapture?: ((event: React.DragEvent<HTMLParagraphElement>) => void) | undefined;
    onDragEnter?: ((event: React.DragEvent<HTMLParagraphElement>) => void) | undefined;
    onDragEnterCapture?: ((event: React.DragEvent<HTMLParagraphElement>) => void) | undefined;
    onDragExit?: ((event: React.DragEvent<HTMLParagraphElement>) => void) | undefined;
    onDragExitCapture?: ((event: React.DragEvent<HTMLParagraphElement>) => void) | undefined;
    onDragLeave?: ((event: React.DragEvent<HTMLParagraphElement>) => void) | undefined;
    onDragLeaveCapture?: ((event: React.DragEvent<HTMLParagraphElement>) => void) | undefined;
    onDragOver?: ((event: React.DragEvent<HTMLParagraphElement>) => void) | undefined;
    onDragOverCapture?: ((event: React.DragEvent<HTMLParagraphElement>) => void) | undefined;
    onDragStartCapture?: ((event: React.DragEvent<HTMLParagraphElement>) => void) | undefined;
    onDrop?: ((event: React.DragEvent<HTMLParagraphElement>) => void) | undefined;
    onDropCapture?: ((event: React.DragEvent<HTMLParagraphElement>) => void) | undefined;
    onMouseDown?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onMouseDownCapture?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onMouseEnter?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onMouseLeave?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onMouseMove?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onMouseMoveCapture?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onMouseOut?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onMouseOutCapture?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onMouseOver?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onMouseOverCapture?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onMouseUp?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onMouseUpCapture?: ((event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void) | undefined;
    onSelect?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onSelectCapture?: ((event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void) | undefined;
    onTouchCancel?: ((event: React.TouchEvent<HTMLParagraphElement>) => void) | undefined;
    onTouchCancelCapture?: ((event: React.TouchEvent<HTMLParagraphElement>) => void) | undefined;
    onTouchEnd?: ((event: React.TouchEvent<HTMLParagraphElement>) => void) | undefined;
    onTouchEndCapture?: ((event: React.TouchEvent<HTMLParagraphElement>) => void) | undefined;
    onTouchMove?: ((event: React.TouchEvent<HTMLParagraphElement>) => void) | undefined;
    onTouchMoveCapture?: ((event: React.TouchEvent<HTMLParagraphElement>) => void) | undefined;
    onTouchStart?: ((event: React.TouchEvent<HTMLParagraphElement>) => void) | undefined;
    onTouchStartCapture?: ((event: React.TouchEvent<HTMLParagraphElement>) => void) | undefined;
    onPointerDown?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onPointerDownCapture?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onPointerMove?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onPointerMoveCapture?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onPointerUp?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onPointerUpCapture?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onPointerCancel?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onPointerCancelCapture?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onPointerEnter?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onPointerEnterCapture?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onPointerLeave?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onPointerLeaveCapture?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onPointerOver?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onPointerOverCapture?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onPointerOut?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onPointerOutCapture?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onGotPointerCapture?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onGotPointerCaptureCapture?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onLostPointerCapture?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onLostPointerCaptureCapture?: ((event: React.PointerEvent<HTMLParagraphElement>) => void) | undefined;
    onScroll?: ((event: React.UIEvent<HTMLParagraphElement>) => void) | undefined;
    onScrollCapture?: ((event: React.UIEvent<HTMLParagraphElement>) => void) | undefined;
    onWheel?: ((event: React.WheelEvent<HTMLParagraphElement>) => void) | undefined;
    onWheelCapture?: ((event: React.WheelEvent<HTMLParagraphElement>) => void) | undefined;
    onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLParagraphElement>) => void) | undefined;
    onAnimationEnd?: ((event: React.AnimationEvent<HTMLParagraphElement>) => void) | undefined;
    onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLParagraphElement>) => void) | undefined;
    onAnimationIteration?: ((event: React.AnimationEvent<HTMLParagraphElement>) => void) | undefined;
    onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLParagraphElement>) => void) | undefined;
    onTransitionEnd?: ((event: React.TransitionEvent<HTMLParagraphElement>) => void) | undefined;
    onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLParagraphElement>) => void) | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: boolean | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: boolean | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: boolean | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
} & MotionProps & React.RefAttributes<HTMLParagraphElement> & {
    skipTheme?: boolean | undefined;
}, "inherit" | "initial" | "hidden" | "color" | "transition" | "animate" | "whileHover" | "variants" | "skipTheme" | "whileTap" | "style" | "title" | "key" | "children" | "transformTemplate" | "transformValues" | "exit" | "positionTransition" | "layoutTransition" | "onUpdate" | "onAnimationStart" | "onAnimationComplete" | "onPan" | "onPanStart" | "onPanSessionStart" | "onPanEnd" | "onTap" | "onTapStart" | "onTapCancel" | "onHoverStart" | "onHoverEnd" | "drag" | "dragDirectionLock" | "dragPropagation" | "dragConstraints" | "dragElastic" | "dragMomentum" | "dragTransition" | "_dragValueX" | "_dragValueY" | "_dragTransitionControls" | "dragOriginX" | "dragOriginY" | "onDragStart" | "onDragEnd" | "onDrag" | "onDirectionLock" | "onDragTransitionEnd" | "custom" | "static" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDragCapture" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "placeholder" | "slot" | "spellCheck" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is"> & React.RefAttributes<React.Component<{}, {}, any>>>, any, BoxProps & TextProps, never>;
declare const Link: StyledComponent<React.ForwardRefExoticComponent<Pick<{
    hidden?: boolean | undefined;
    color?: string | undefined;
    title?: string | undefined;
    children?: React.ReactNode;
    type?: string | undefined;
    className?: string | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    media?: string | undefined;
    target?: string | undefined;
    role?: string | undefined;
    tabIndex?: number | undefined;
    href?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: boolean | "false" | "true" | undefined;
    "aria-autocomplete"?: "none" | "list" | "inline" | "both" | undefined;
    "aria-busy"?: boolean | "false" | "true" | undefined;
    "aria-checked"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "step" | "false" | "true" | "page" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: boolean | "false" | "true" | undefined;
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: boolean | "false" | "true" | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: boolean | "false" | "true" | undefined;
    "aria-haspopup"?: boolean | "grid" | "dialog" | "menu" | "false" | "true" | "listbox" | "tree" | undefined;
    "aria-hidden"?: boolean | "false" | "true" | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: boolean | "false" | "true" | undefined;
    "aria-multiline"?: boolean | "false" | "true" | undefined;
    "aria-multiselectable"?: boolean | "false" | "true" | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-readonly"?: boolean | "false" | "true" | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals" | undefined;
    "aria-required"?: boolean | "false" | "true" | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: boolean | "false" | "true" | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: ((event: React.ClipboardEvent<HTMLAnchorElement>) => void) | undefined;
    onCopyCapture?: ((event: React.ClipboardEvent<HTMLAnchorElement>) => void) | undefined;
    onCut?: ((event: React.ClipboardEvent<HTMLAnchorElement>) => void) | undefined;
    onCutCapture?: ((event: React.ClipboardEvent<HTMLAnchorElement>) => void) | undefined;
    onPaste?: ((event: React.ClipboardEvent<HTMLAnchorElement>) => void) | undefined;
    onPasteCapture?: ((event: React.ClipboardEvent<HTMLAnchorElement>) => void) | undefined;
    onCompositionEnd?: ((event: React.CompositionEvent<HTMLAnchorElement>) => void) | undefined;
    onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLAnchorElement>) => void) | undefined;
    onCompositionStart?: ((event: React.CompositionEvent<HTMLAnchorElement>) => void) | undefined;
    onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLAnchorElement>) => void) | undefined;
    onCompositionUpdate?: ((event: React.CompositionEvent<HTMLAnchorElement>) => void) | undefined;
    onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLAnchorElement>) => void) | undefined;
    onFocus?: ((event: React.FocusEvent<HTMLAnchorElement>) => void) | undefined;
    onFocusCapture?: ((event: React.FocusEvent<HTMLAnchorElement>) => void) | undefined;
    onBlur?: ((event: React.FocusEvent<HTMLAnchorElement>) => void) | undefined;
    onBlurCapture?: ((event: React.FocusEvent<HTMLAnchorElement>) => void) | undefined;
    onChange?: ((event: React.FormEvent<HTMLAnchorElement>) => void) | undefined;
    onChangeCapture?: ((event: React.FormEvent<HTMLAnchorElement>) => void) | undefined;
    onBeforeInput?: ((event: React.FormEvent<HTMLAnchorElement>) => void) | undefined;
    onBeforeInputCapture?: ((event: React.FormEvent<HTMLAnchorElement>) => void) | undefined;
    onInput?: ((event: React.FormEvent<HTMLAnchorElement>) => void) | undefined;
    onInputCapture?: ((event: React.FormEvent<HTMLAnchorElement>) => void) | undefined;
    onReset?: ((event: React.FormEvent<HTMLAnchorElement>) => void) | undefined;
    onResetCapture?: ((event: React.FormEvent<HTMLAnchorElement>) => void) | undefined;
    onSubmit?: ((event: React.FormEvent<HTMLAnchorElement>) => void) | undefined;
    onSubmitCapture?: ((event: React.FormEvent<HTMLAnchorElement>) => void) | undefined;
    onInvalid?: ((event: React.FormEvent<HTMLAnchorElement>) => void) | undefined;
    onInvalidCapture?: ((event: React.FormEvent<HTMLAnchorElement>) => void) | undefined;
    onLoad?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onLoadCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onError?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onErrorCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<HTMLAnchorElement>) => void) | undefined;
    onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLAnchorElement>) => void) | undefined;
    onKeyPress?: ((event: React.KeyboardEvent<HTMLAnchorElement>) => void) | undefined;
    onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLAnchorElement>) => void) | undefined;
    onKeyUp?: ((event: React.KeyboardEvent<HTMLAnchorElement>) => void) | undefined;
    onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLAnchorElement>) => void) | undefined;
    onAbort?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onAbortCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onCanPlay?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onDurationChange?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onEmptied?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onEncrypted?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onEnded?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onEndedCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onLoadedData?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onLoadStart?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onPause?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onPauseCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onPlay?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onPlayCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onPlaying?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onPlayingCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onProgress?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onProgressCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onRateChange?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onSeeked?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onSeekedCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onSeeking?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onSeekingCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onStalled?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onStalledCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onSuspend?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onSuspendCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onTimeUpdate?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onVolumeChange?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onWaiting?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onWaitingCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onAuxClick?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onAuxClickCapture?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onClick?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onClickCapture?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onContextMenu?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onContextMenuCapture?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onDoubleClick?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onDoubleClickCapture?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onDragCapture?: ((event: React.DragEvent<HTMLAnchorElement>) => void) | undefined;
    onDragEndCapture?: ((event: React.DragEvent<HTMLAnchorElement>) => void) | undefined;
    onDragEnter?: ((event: React.DragEvent<HTMLAnchorElement>) => void) | undefined;
    onDragEnterCapture?: ((event: React.DragEvent<HTMLAnchorElement>) => void) | undefined;
    onDragExit?: ((event: React.DragEvent<HTMLAnchorElement>) => void) | undefined;
    onDragExitCapture?: ((event: React.DragEvent<HTMLAnchorElement>) => void) | undefined;
    onDragLeave?: ((event: React.DragEvent<HTMLAnchorElement>) => void) | undefined;
    onDragLeaveCapture?: ((event: React.DragEvent<HTMLAnchorElement>) => void) | undefined;
    onDragOver?: ((event: React.DragEvent<HTMLAnchorElement>) => void) | undefined;
    onDragOverCapture?: ((event: React.DragEvent<HTMLAnchorElement>) => void) | undefined;
    onDragStartCapture?: ((event: React.DragEvent<HTMLAnchorElement>) => void) | undefined;
    onDrop?: ((event: React.DragEvent<HTMLAnchorElement>) => void) | undefined;
    onDropCapture?: ((event: React.DragEvent<HTMLAnchorElement>) => void) | undefined;
    onMouseDown?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onMouseDownCapture?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onMouseEnter?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onMouseLeave?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onMouseMove?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onMouseMoveCapture?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onMouseOut?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onMouseOutCapture?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onMouseOver?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onMouseOverCapture?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onMouseUp?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onMouseUpCapture?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    onSelect?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onSelectCapture?: ((event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void) | undefined;
    onTouchCancel?: ((event: React.TouchEvent<HTMLAnchorElement>) => void) | undefined;
    onTouchCancelCapture?: ((event: React.TouchEvent<HTMLAnchorElement>) => void) | undefined;
    onTouchEnd?: ((event: React.TouchEvent<HTMLAnchorElement>) => void) | undefined;
    onTouchEndCapture?: ((event: React.TouchEvent<HTMLAnchorElement>) => void) | undefined;
    onTouchMove?: ((event: React.TouchEvent<HTMLAnchorElement>) => void) | undefined;
    onTouchMoveCapture?: ((event: React.TouchEvent<HTMLAnchorElement>) => void) | undefined;
    onTouchStart?: ((event: React.TouchEvent<HTMLAnchorElement>) => void) | undefined;
    onTouchStartCapture?: ((event: React.TouchEvent<HTMLAnchorElement>) => void) | undefined;
    onPointerDown?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onPointerDownCapture?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onPointerMove?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onPointerMoveCapture?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onPointerUp?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onPointerUpCapture?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onPointerCancel?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onPointerCancelCapture?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onPointerEnter?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onPointerEnterCapture?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onPointerLeave?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onPointerLeaveCapture?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onPointerOver?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onPointerOverCapture?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onPointerOut?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onPointerOutCapture?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onGotPointerCapture?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onGotPointerCaptureCapture?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onLostPointerCapture?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onLostPointerCaptureCapture?: ((event: React.PointerEvent<HTMLAnchorElement>) => void) | undefined;
    onScroll?: ((event: React.UIEvent<HTMLAnchorElement>) => void) | undefined;
    onScrollCapture?: ((event: React.UIEvent<HTMLAnchorElement>) => void) | undefined;
    onWheel?: ((event: React.WheelEvent<HTMLAnchorElement>) => void) | undefined;
    onWheelCapture?: ((event: React.WheelEvent<HTMLAnchorElement>) => void) | undefined;
    onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLAnchorElement>) => void) | undefined;
    onAnimationEnd?: ((event: React.AnimationEvent<HTMLAnchorElement>) => void) | undefined;
    onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLAnchorElement>) => void) | undefined;
    onAnimationIteration?: ((event: React.AnimationEvent<HTMLAnchorElement>) => void) | undefined;
    onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLAnchorElement>) => void) | undefined;
    onTransitionEnd?: ((event: React.TransitionEvent<HTMLAnchorElement>) => void) | undefined;
    onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLAnchorElement>) => void) | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: boolean | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: boolean | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: boolean | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
    download?: any;
    hrefLang?: string | undefined;
    ping?: string | undefined;
    rel?: string | undefined;
    referrerPolicy?: string | undefined;
} & MotionProps & React.RefAttributes<HTMLAnchorElement> & {
    skipTheme?: boolean | undefined;
}, "inherit" | "initial" | "hidden" | "color" | "transition" | "animate" | "whileHover" | "variants" | "skipTheme" | "whileTap" | "style" | "title" | "key" | "children" | "transformTemplate" | "transformValues" | "exit" | "positionTransition" | "layoutTransition" | "onUpdate" | "onAnimationStart" | "onAnimationComplete" | "onPan" | "onPanStart" | "onPanSessionStart" | "onPanEnd" | "onTap" | "onTapStart" | "onTapCancel" | "onHoverStart" | "onHoverEnd" | "drag" | "dragDirectionLock" | "dragPropagation" | "dragConstraints" | "dragElastic" | "dragMomentum" | "dragTransition" | "_dragValueX" | "_dragValueY" | "_dragTransitionControls" | "dragOriginX" | "dragOriginY" | "onDragStart" | "onDragEnd" | "onDrag" | "onDirectionLock" | "onDragTransitionEnd" | "custom" | "static" | "type" | "className" | "id" | "lang" | "media" | "target" | "role" | "tabIndex" | "href" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDragCapture" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "placeholder" | "slot" | "spellCheck" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "download" | "hrefLang" | "ping" | "rel" | "referrerPolicy"> & React.RefAttributes<React.Component<{}, {}, any>>>, any, BoxProps, never>;
declare const Input: StyledComponent<React.ForwardRefExoticComponent<Pick<{
    hidden?: boolean | undefined;
    color?: string | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    form?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    children?: React.ReactNode;
    type?: string | undefined;
    min?: string | number | undefined;
    max?: string | number | undefined;
    className?: string | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    name?: string | undefined;
    role?: string | undefined;
    tabIndex?: number | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: boolean | "false" | "true" | undefined;
    "aria-autocomplete"?: "none" | "list" | "inline" | "both" | undefined;
    "aria-busy"?: boolean | "false" | "true" | undefined;
    "aria-checked"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "step" | "false" | "true" | "page" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: boolean | "false" | "true" | undefined;
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: boolean | "false" | "true" | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: boolean | "false" | "true" | undefined;
    "aria-haspopup"?: boolean | "grid" | "dialog" | "menu" | "false" | "true" | "listbox" | "tree" | undefined;
    "aria-hidden"?: boolean | "false" | "true" | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: boolean | "false" | "true" | undefined;
    "aria-multiline"?: boolean | "false" | "true" | undefined;
    "aria-multiselectable"?: boolean | "false" | "true" | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-readonly"?: boolean | "false" | "true" | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals" | undefined;
    "aria-required"?: boolean | "false" | "true" | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: boolean | "false" | "true" | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: ((event: React.ClipboardEvent<HTMLInputElement>) => void) | undefined;
    onCopyCapture?: ((event: React.ClipboardEvent<HTMLInputElement>) => void) | undefined;
    onCut?: ((event: React.ClipboardEvent<HTMLInputElement>) => void) | undefined;
    onCutCapture?: ((event: React.ClipboardEvent<HTMLInputElement>) => void) | undefined;
    onPaste?: ((event: React.ClipboardEvent<HTMLInputElement>) => void) | undefined;
    onPasteCapture?: ((event: React.ClipboardEvent<HTMLInputElement>) => void) | undefined;
    onCompositionEnd?: ((event: React.CompositionEvent<HTMLInputElement>) => void) | undefined;
    onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLInputElement>) => void) | undefined;
    onCompositionStart?: ((event: React.CompositionEvent<HTMLInputElement>) => void) | undefined;
    onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLInputElement>) => void) | undefined;
    onCompositionUpdate?: ((event: React.CompositionEvent<HTMLInputElement>) => void) | undefined;
    onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLInputElement>) => void) | undefined;
    onFocus?: ((event: React.FocusEvent<HTMLInputElement>) => void) | undefined;
    onFocusCapture?: ((event: React.FocusEvent<HTMLInputElement>) => void) | undefined;
    onBlur?: ((event: React.FocusEvent<HTMLInputElement>) => void) | undefined;
    onBlurCapture?: ((event: React.FocusEvent<HTMLInputElement>) => void) | undefined;
    onChange?: ((event: React.ChangeEvent<HTMLInputElement>) => void) | undefined;
    onChangeCapture?: ((event: React.FormEvent<HTMLInputElement>) => void) | undefined;
    onBeforeInput?: ((event: React.FormEvent<HTMLInputElement>) => void) | undefined;
    onBeforeInputCapture?: ((event: React.FormEvent<HTMLInputElement>) => void) | undefined;
    onInput?: ((event: React.FormEvent<HTMLInputElement>) => void) | undefined;
    onInputCapture?: ((event: React.FormEvent<HTMLInputElement>) => void) | undefined;
    onReset?: ((event: React.FormEvent<HTMLInputElement>) => void) | undefined;
    onResetCapture?: ((event: React.FormEvent<HTMLInputElement>) => void) | undefined;
    onSubmit?: ((event: React.FormEvent<HTMLInputElement>) => void) | undefined;
    onSubmitCapture?: ((event: React.FormEvent<HTMLInputElement>) => void) | undefined;
    onInvalid?: ((event: React.FormEvent<HTMLInputElement>) => void) | undefined;
    onInvalidCapture?: ((event: React.FormEvent<HTMLInputElement>) => void) | undefined;
    onLoad?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onLoadCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onError?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onErrorCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<HTMLInputElement>) => void) | undefined;
    onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLInputElement>) => void) | undefined;
    onKeyPress?: ((event: React.KeyboardEvent<HTMLInputElement>) => void) | undefined;
    onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLInputElement>) => void) | undefined;
    onKeyUp?: ((event: React.KeyboardEvent<HTMLInputElement>) => void) | undefined;
    onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLInputElement>) => void) | undefined;
    onAbort?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onAbortCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onCanPlay?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onDurationChange?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onEmptied?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onEncrypted?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onEnded?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onEndedCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onLoadedData?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onLoadStart?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onPause?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onPauseCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onPlay?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onPlayCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onPlaying?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onPlayingCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onProgress?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onProgressCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onRateChange?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onSeeked?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onSeekedCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onSeeking?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onSeekingCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onStalled?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onStalledCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onSuspend?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onSuspendCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onTimeUpdate?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onVolumeChange?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onWaiting?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onWaitingCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onAuxClick?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onAuxClickCapture?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onClick?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onClickCapture?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onContextMenu?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onContextMenuCapture?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onDoubleClick?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onDoubleClickCapture?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onDragCapture?: ((event: React.DragEvent<HTMLInputElement>) => void) | undefined;
    onDragEndCapture?: ((event: React.DragEvent<HTMLInputElement>) => void) | undefined;
    onDragEnter?: ((event: React.DragEvent<HTMLInputElement>) => void) | undefined;
    onDragEnterCapture?: ((event: React.DragEvent<HTMLInputElement>) => void) | undefined;
    onDragExit?: ((event: React.DragEvent<HTMLInputElement>) => void) | undefined;
    onDragExitCapture?: ((event: React.DragEvent<HTMLInputElement>) => void) | undefined;
    onDragLeave?: ((event: React.DragEvent<HTMLInputElement>) => void) | undefined;
    onDragLeaveCapture?: ((event: React.DragEvent<HTMLInputElement>) => void) | undefined;
    onDragOver?: ((event: React.DragEvent<HTMLInputElement>) => void) | undefined;
    onDragOverCapture?: ((event: React.DragEvent<HTMLInputElement>) => void) | undefined;
    onDragStartCapture?: ((event: React.DragEvent<HTMLInputElement>) => void) | undefined;
    onDrop?: ((event: React.DragEvent<HTMLInputElement>) => void) | undefined;
    onDropCapture?: ((event: React.DragEvent<HTMLInputElement>) => void) | undefined;
    onMouseDown?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onMouseDownCapture?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onMouseEnter?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onMouseLeave?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onMouseMove?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onMouseMoveCapture?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onMouseOut?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onMouseOutCapture?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onMouseOver?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onMouseOverCapture?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onMouseUp?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onMouseUpCapture?: ((event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onSelect?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onSelectCapture?: ((event: React.SyntheticEvent<HTMLInputElement, Event>) => void) | undefined;
    onTouchCancel?: ((event: React.TouchEvent<HTMLInputElement>) => void) | undefined;
    onTouchCancelCapture?: ((event: React.TouchEvent<HTMLInputElement>) => void) | undefined;
    onTouchEnd?: ((event: React.TouchEvent<HTMLInputElement>) => void) | undefined;
    onTouchEndCapture?: ((event: React.TouchEvent<HTMLInputElement>) => void) | undefined;
    onTouchMove?: ((event: React.TouchEvent<HTMLInputElement>) => void) | undefined;
    onTouchMoveCapture?: ((event: React.TouchEvent<HTMLInputElement>) => void) | undefined;
    onTouchStart?: ((event: React.TouchEvent<HTMLInputElement>) => void) | undefined;
    onTouchStartCapture?: ((event: React.TouchEvent<HTMLInputElement>) => void) | undefined;
    onPointerDown?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onPointerDownCapture?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onPointerMove?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onPointerMoveCapture?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onPointerUp?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onPointerUpCapture?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onPointerCancel?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onPointerCancelCapture?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onPointerEnter?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onPointerEnterCapture?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onPointerLeave?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onPointerLeaveCapture?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onPointerOver?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onPointerOverCapture?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onPointerOut?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onPointerOutCapture?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onGotPointerCapture?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onGotPointerCaptureCapture?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onLostPointerCapture?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onLostPointerCaptureCapture?: ((event: React.PointerEvent<HTMLInputElement>) => void) | undefined;
    onScroll?: ((event: React.UIEvent<HTMLInputElement>) => void) | undefined;
    onScrollCapture?: ((event: React.UIEvent<HTMLInputElement>) => void) | undefined;
    onWheel?: ((event: React.WheelEvent<HTMLInputElement>) => void) | undefined;
    onWheelCapture?: ((event: React.WheelEvent<HTMLInputElement>) => void) | undefined;
    onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLInputElement>) => void) | undefined;
    onAnimationEnd?: ((event: React.AnimationEvent<HTMLInputElement>) => void) | undefined;
    onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLInputElement>) => void) | undefined;
    onAnimationIteration?: ((event: React.AnimationEvent<HTMLInputElement>) => void) | undefined;
    onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLInputElement>) => void) | undefined;
    onTransitionEnd?: ((event: React.TransitionEvent<HTMLInputElement>) => void) | undefined;
    onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLInputElement>) => void) | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: boolean | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: boolean | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: boolean | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
    value?: string | number | string[] | undefined;
    alt?: string | undefined;
    crossOrigin?: string | undefined;
    src?: string | undefined;
    autoFocus?: boolean | undefined;
    disabled?: boolean | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    autoComplete?: string | undefined;
    accept?: string | undefined;
    capture?: string | boolean | undefined;
    checked?: boolean | undefined;
    list?: string | undefined;
    maxLength?: number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    readOnly?: boolean | undefined;
    required?: boolean | undefined;
    size?: number | undefined;
    step?: string | number | undefined;
} & MotionProps & React.RefAttributes<HTMLInputElement> & {
    skipTheme?: boolean | undefined;
}, "inherit" | "initial" | "hidden" | "color" | "height" | "width" | "transition" | "animate" | "whileHover" | "variants" | "skipTheme" | "whileTap" | "form" | "style" | "title" | "pattern" | "key" | "children" | "transformTemplate" | "transformValues" | "exit" | "positionTransition" | "layoutTransition" | "onUpdate" | "onAnimationStart" | "onAnimationComplete" | "onPan" | "onPanStart" | "onPanSessionStart" | "onPanEnd" | "onTap" | "onTapStart" | "onTapCancel" | "onHoverStart" | "onHoverEnd" | "drag" | "dragDirectionLock" | "dragPropagation" | "dragConstraints" | "dragElastic" | "dragMomentum" | "dragTransition" | "_dragValueX" | "_dragValueY" | "_dragTransitionControls" | "dragOriginX" | "dragOriginY" | "onDragStart" | "onDragEnd" | "onDrag" | "onDirectionLock" | "onDragTransitionEnd" | "custom" | "static" | "type" | "min" | "max" | "className" | "id" | "lang" | "name" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDragCapture" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "placeholder" | "slot" | "spellCheck" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "value" | "alt" | "crossOrigin" | "src" | "autoFocus" | "disabled" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "autoComplete" | "accept" | "capture" | "checked" | "list" | "maxLength" | "minLength" | "multiple" | "readOnly" | "required" | "size" | "step"> & React.RefAttributes<React.Component<{}, {}, any>>>, any, BoxProps, never>;
declare function SVG({ src, children, ...props }: {
    [x: string]: any;
    src?: string | undefined;
    children?: React.ReactNode;
}): JSX.Element;
declare namespace SVG {
    var defaultProps: {
        stroke: string;
    };
}
declare const useTheme: () => {
    [key: string]: any;
} & {
    get: (...keys: any[]) => any;
    color: (val: any) => any;
};
